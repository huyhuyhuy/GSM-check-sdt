#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test file ƒë·ªÉ chuy·ªÉn ƒë·ªïi file WAV th√†nh text s·ª≠ d·ª•ng Wav2Vec2 Base Vietnamese-250h
M√¥ h√¨nh: "nguyenvulebinh/wav2vec2-base-vietnamese-250h"

C√†i ƒë·∫∑t dependencies:
pip install transformers torch torchaudio librosa soundfile
pip install accelerate (ƒë·ªÉ tƒÉng t·ªëc GPU)
"""

import os
import sys
import time
import json
import wave
import numpy as np
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings("ignore")

# ==============================================================================
# IMPORTS V√Ä KI·ªÇM TRA DEPENDENCIES
# ==============================================================================

def check_dependencies():
    """Ki·ªÉm tra v√† c√†i ƒë·∫∑t dependencies c·∫ßn thi·∫øt"""
    required_packages = [
        "transformers",
        "torch", 
        "torchaudio",
        "librosa",
        "soundfile"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}: ƒê√£ c√†i ƒë·∫∑t")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}: Ch∆∞a c√†i ƒë·∫∑t")
    
    if missing_packages:
        print(f"\nüö® C·∫ßn c√†i ƒë·∫∑t c√°c package sau:")
        print(f"pip install {' '.join(missing_packages)}")
        print(f"pip install accelerate  # ƒê·ªÉ tƒÉng t·ªëc GPU")
        return False
    
    return True

# ==============================================================================
# WAV2VEC2 VIETNAMESE MODEL
# ==============================================================================

class Wav2Vec2VietnameseSTT:
    """
    L·ªõp x·ª≠ l√Ω Speech-to-Text s·ª≠ d·ª•ng Wav2Vec2 Base Vietnamese-250h
    """
    
    def __init__(self, model_name: str = "nguyenvulebinh/wav2vec2-base-vietnamese-250h"):
        """
        Kh·ªüi t·∫°o m√¥ h√¨nh Wav2Vec2 Vietnamese
        
        Args:
            model_name: T√™n m√¥ h√¨nh t·ª´ Hugging Face
        """
        self.model_name = model_name
        self.model = None
        self.processor = None
        self.device = None
        self.is_loaded = False
        
        print(f"üöÄ Kh·ªüi t·∫°o Wav2Vec2 Vietnamese STT...")
        print(f"üì¶ Model: {model_name}")
        
        # Ki·ªÉm tra GPU
        self._setup_device()
        
        # Load m√¥ h√¨nh
        self._load_model()
    
    def _setup_device(self):
        """Thi·∫øt l·∫≠p device (GPU/CPU)"""
        try:
            import torch
            if torch.cuda.is_available():
                self.device = "cuda"
                print(f"üéÆ GPU detected: {torch.cuda.get_device_name(0)}")
                print(f"üíæ GPU Memory: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
            else:
                self.device = "cpu"
                print("üíª S·ª≠ d·ª•ng CPU")
        except ImportError:
            self.device = "cpu"
            print("üíª S·ª≠ d·ª•ng CPU (torch ch∆∞a c√†i ƒë·∫∑t)")
    
    def _load_model(self):
        """Load m√¥ h√¨nh v√† processor"""
        try:
            from transformers import Wav2Vec2ForCTC, Wav2Vec2Processor
            
            print("üì• ƒêang t·∫£i m√¥ h√¨nh Wav2Vec2 Vietnamese...")
            start_time = time.time()
            
            # Load processor
            self.processor = Wav2Vec2Processor.from_pretrained(self.model_name)
            print("‚úÖ ƒê√£ t·∫£i processor")
            
            # Load model
            self.model = Wav2Vec2ForCTC.from_pretrained(self.model_name)
            self.model.to(self.device)
            print("‚úÖ ƒê√£ t·∫£i model")
            
            # Set model to evaluation mode
            self.model.eval()
            
            load_time = time.time() - start_time
            print(f"‚è±Ô∏è Th·ªùi gian t·∫£i m√¥ h√¨nh: {load_time:.2f}s")
            
            self.is_loaded = True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
            self.is_loaded = False
    
    def preprocess_audio(self, wav_file_path: str) -> Optional[np.ndarray]:
        """
        Ti·ªÅn x·ª≠ l√Ω file WAV ƒë·ªÉ ph√π h·ª£p v·ªõi m√¥ h√¨nh
        
        Args:
            wav_file_path: ƒê∆∞·ªùng d·∫´n file WAV
            
        Returns:
            Audio array ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        """
        try:
            print(f"üîß ƒêang ti·ªÅn x·ª≠ l√Ω audio: {wav_file_path}")
            
            # ƒê·ªçc file WAV
            with wave.open(wav_file_path, 'rb') as wf:
                channels = wf.getnchannels()
                sample_width = wf.getsampwidth()
                sample_rate = wf.getframerate()
                n_frames = wf.getnframes()
                
                print(f"üìä Audio info: {channels} channels, {sample_width*8} bit, {sample_rate} Hz, {n_frames} frames")
                
                # ƒê·ªçc raw audio data
                raw_audio = wf.readframes(n_frames)
            
            # Chuy·ªÉn ƒë·ªïi bytes th√†nh numpy array
            if sample_width == 2:  # 16-bit
                audio = np.frombuffer(raw_audio, dtype=np.int16).astype(np.float32) / 32768.0
            elif sample_width == 4:  # 32-bit
                audio = np.frombuffer(raw_audio, dtype=np.int32).astype(np.float32) / 2147483648.0
            else:  # 8-bit
                audio = np.frombuffer(raw_audio, dtype=np.uint8).astype(np.float32) / 128.0
            
            # Chuy·ªÉn stereo th√†nh mono n·∫øu c·∫ßn
            if channels == 2:
                audio = audio.reshape(-1, 2).mean(axis=1)
                print("üîÑ Chuy·ªÉn stereo ‚Üí mono")
            
            # Resample v·ªÅ 16kHz n·∫øu c·∫ßn (Wav2Vec2 y√™u c·∫ßu 16kHz)
            if sample_rate != 16000:
                print(f"üîÑ Resample: {sample_rate} Hz ‚Üí 16000 Hz")
                import librosa
                audio = librosa.resample(audio, orig_sr=sample_rate, target_sr=16000)
            
            # Normalize audio
            max_amp = np.max(np.abs(audio))
            if max_amp > 0:
                audio = audio / max_amp
            
            print(f"‚úÖ Audio ƒë√£ x·ª≠ l√Ω: {len(audio)} samples, {len(audio)/16000:.2f}s")
            print(f"üîç Audio range: {audio.min():.6f} to {audio.max():.6f}")
            
            return audio
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ti·ªÅn x·ª≠ l√Ω audio: {str(e)}")
            return None
    
    def transcribe(self, wav_file_path: str) -> Dict:
        """
        Chuy·ªÉn ƒë·ªïi file WAV th√†nh text
        
        Args:
            wav_file_path: ƒê∆∞·ªùng d·∫´n file WAV
            
        Returns:
            Dict ch·ª©a k·∫øt qu·∫£ transcription
        """
        if not self.is_loaded:
            return {
                "success": False,
                "error": "M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i",
                "text": None
            }
        
        if not os.path.exists(wav_file_path):
            return {
                "success": False,
                "error": f"File kh√¥ng t·ªìn t·∫°i: {wav_file_path}",
                "text": None
            }
        
        try:
            start_time = time.time()
            
            # Ti·ªÅn x·ª≠ l√Ω audio
            audio = self.preprocess_audio(wav_file_path)
            if audio is None:
                return {
                    "success": False,
                    "error": "Kh√¥ng th·ªÉ ti·ªÅn x·ª≠ l√Ω audio",
                    "text": None
                }
            
            # Chuy·ªÉn ƒë·ªïi audio th√†nh input format cho m√¥ h√¨nh
            print("üéôÔ∏è ƒêang nh·∫≠n di·ªán v·ªõi Wav2Vec2 Vietnamese...")
            
            # S·ª≠ d·ª•ng processor ƒë·ªÉ chu·∫©n b·ªã input
            inputs = self.processor(
                audio, 
                sampling_rate=16000, 
                return_tensors="pt", 
                padding=True
            )
            
            # Di chuy·ªÉn input v·ªÅ device
            inputs = {k: v.to(self.device) for k, v in inputs.items()}
            
            # Debug: In ra keys c·ªßa inputs
            print(f"üîç Input keys: {list(inputs.keys())}")
            
            # Inference - x·ª≠ l√Ω input format ƒë√∫ng c√°ch
            with torch.no_grad():
                # Ki·ªÉm tra key ƒë√∫ng cho input
                if 'input_values' in inputs:
                    input_key = 'input_values'
                elif 'input_features' in inputs:
                    input_key = 'input_features'
                else:
                    # In ra t·∫•t c·∫£ keys ƒë·ªÉ debug
                    print(f"üîç T·∫•t c·∫£ input keys: {list(inputs.keys())}")
                    # S·ª≠ d·ª•ng key ƒë·∫ßu ti√™n
                    input_key = list(inputs.keys())[0]
                    print(f"üîç S·ª≠ d·ª•ng key: {input_key}")
                
                logits = self.model(inputs[input_key]).logits
                
                # Decode logits th√†nh text
                predicted_ids = torch.argmax(logits, dim=-1)
                transcription = self.processor.batch_decode(predicted_ids)
            
            processing_time = time.time() - start_time
            
            # L·∫•y text t·ª´ batch
            text = transcription[0] if transcription else ""
            
            print(f"‚úÖ Transcription ho√†n th√†nh trong {processing_time:.2f}s")
            
            return {
                "success": True,
                "text": text.strip(),
                "processing_time": processing_time,
                "model_name": self.model_name,
                "device": self.device,
                "audio_duration": len(audio) / 16000,
                "confidence": None  # Wav2Vec2 kh√¥ng tr·∫£ v·ªÅ confidence score
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"L·ªói khi transcription: {str(e)}",
                "text": None
            }

# ==============================================================================
# UTILITY FUNCTIONS
# ==============================================================================

def analyze_audio_file(wav_file_path: str) -> Dict:
    """
    Ph√¢n t√≠ch th√¥ng tin file audio
    """
    try:
        with wave.open(wav_file_path, 'rb') as wf:
            info = {
                "file_path": wav_file_path,
                "file_size_mb": os.path.getsize(wav_file_path) / (1024 * 1024),
                "channels": wf.getnchannels(),
                "sample_width_bits": wf.getsampwidth() * 8,
                "sample_rate": wf.getframerate(),
                "duration_seconds": wf.getnframes() / wf.getframerate(),
                "total_frames": wf.getnframes()
            }
        return info
    except Exception as e:
        return {
            "file_path": wav_file_path,
            "error": str(e)
        }

def save_results(results: Dict, output_file: str):
    """
    L∆∞u k·∫øt qu·∫£ v√†o file JSON
    """
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {output_file}")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file: {str(e)}")

def print_results_summary(results: Dict):
    """
    In t√≥m t·∫Øt k·∫øt qu·∫£
    """
    print("\n" + "=" * 80)
    print("üìã T√ìM T·∫ÆT K·∫æT QU·∫¢ WAV2VEC2 VIETNAMESE STT")
    print("=" * 80)
    
    if results.get("success"):
        print(f"‚úÖ Tr·∫°ng th√°i: Th√†nh c√¥ng")
        print(f"üìù Text: {results.get('text', 'N/A')}")
        print(f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {results.get('processing_time', 0):.2f}s")
        print(f"üéµ Th·ªùi l∆∞·ª£ng audio: {results.get('audio_duration', 0):.2f}s")
        print(f"ü§ñ Model: {results.get('model_name', 'N/A')}")
        print(f"üíª Device: {results.get('device', 'N/A')}")
    else:
        print(f"‚ùå Tr·∫°ng th√°i: Th·∫•t b·∫°i")
        print(f"üö® L·ªói: {results.get('error', 'N/A')}")
    
    print("=" * 80)

# ==============================================================================
# MAIN TEST FUNCTION
# ==============================================================================

def test_wav2vec2_vietnamese(wav_file_path: str, 
                             output_file: Optional[str] = None,
                             save_audio_info: bool = True) -> Dict:
    """
    H√†m ch√≠nh ƒë·ªÉ test Wav2Vec2 Vietnamese STT
    
    Args:
        wav_file_path: ƒê∆∞·ªùng d·∫´n file WAV
        output_file: File output JSON (t√πy ch·ªçn)
        save_audio_info: C√≥ l∆∞u th√¥ng tin audio kh√¥ng
        
    Returns:
        Dict ch·ª©a k·∫øt qu·∫£ STT
    """
    
    print("üéµ B·∫ÆT ƒê·∫¶U TEST WAV2VEC2 VIETNAMESE STT")
    print(f"üìÅ File: {wav_file_path}")
    print("=" * 80)
    
    # Ki·ªÉm tra dependencies
    if not check_dependencies():
        return {
            "success": False,
            "error": "Thi·∫øu dependencies c·∫ßn thi·∫øt"
        }
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(wav_file_path):
        return {
            "success": False,
            "error": f"File kh√¥ng t·ªìn t·∫°i: {wav_file_path}"
        }
    
    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    if not wav_file_path.lower().endswith('.wav'):
        return {
            "success": False,
            "error": "File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .wav"
        }
    
    try:
        # Ph√¢n t√≠ch file audio
        audio_info = None
        if save_audio_info:
            print("\nüìä PH√ÇN T√çCH FILE AUDIO:")
            audio_info = analyze_audio_file(wav_file_path)
            for key, value in audio_info.items():
                if key != "file_path":
                    print(f"   {key}: {value}")
        
        # Kh·ªüi t·∫°o Wav2Vec2 Vietnamese STT
        print("\nüöÄ KH·ªûI T·∫†O M√î H√åNH:")
        stt_model = Wav2Vec2VietnameseSTT()
        
        if not stt_model.is_loaded:
            return {
                "success": False,
                "error": "Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh Wav2Vec2 Vietnamese"
            }
        
        # Th·ª±c hi·ªán transcription
        print("\nüéôÔ∏è TH·ª∞C HI·ªÜN TRANSCRIPTION:")
        results = stt_model.transcribe(wav_file_path)
        
        # Th√™m th√¥ng tin b·ªï sung
        results["input_file"] = wav_file_path
        results["audio_info"] = audio_info
        results["test_timestamp"] = time.strftime("%Y-%m-%d %H:%M:%S")
        
        # In k·∫øt qu·∫£
        print_results_summary(results)
        
        # L∆∞u k·∫øt qu·∫£ n·∫øu c√≥ y√™u c·∫ßu
        if output_file:
            save_results(results, output_file)
        
        return results
        
    except Exception as e:
        error_result = {
            "success": False,
            "error": f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}",
            "input_file": wav_file_path
        }
        print(f"‚ùå L·ªói: {str(e)}")
        return error_result

# ==============================================================================
# COMMAND LINE INTERFACE
# ==============================================================================

def main():
    """
    Command line interface ƒë·ªÉ test Wav2Vec2 Vietnamese STT
    """
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Test Wav2Vec2 Vietnamese Speech-to-Text v·ªõi file WAV"
    )
    parser.add_argument("wav_file", help="ƒê∆∞·ªùng d·∫´n file WAV")
    parser.add_argument("--output", "-o", help="File output JSON (t√πy ch·ªçn)")
    parser.add_argument("--no-audio-info", action="store_true", 
                       help="Kh√¥ng l∆∞u th√¥ng tin audio")
    
    args = parser.parse_args()
    
    # Test Wav2Vec2 Vietnamese STT
    result = test_wav2vec2_vietnamese(
        args.wav_file,
        output_file=args.output,
        save_audio_info=not args.no_audio_info
    )
    
    # In k·∫øt qu·∫£ chi ti·∫øt n·∫øu kh√¥ng c√≥ output file
    if not args.output:
        print("\nüìÑ K·∫æT QU·∫¢ CHI TI·∫æT:")
        print(json.dumps(result, ensure_ascii=False, indent=2))

# ==============================================================================
# DEMO V√Ä TEST
# ==============================================================================

def demo_with_sample_files():
    """
    Demo v·ªõi c√°c file WAV c√≥ s·∫µn trong d·ª± √°n
    """
    print("üé¨ DEMO WAV2VEC2 VIETNAMESE STT")
    print("=" * 80)
    
    # T√¨m c√°c file WAV trong d·ª± √°n
    wav_files = []
    for ext in ['*.wav', '*.WAV']:
        wav_files.extend(Path('.').glob(ext))
    
    if not wav_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file WAV n√†o trong th∆∞ m·ª•c hi·ªán t·∫°i")
        return
    
    print(f"üìÅ T√¨m th·∫•y {len(wav_files)} file WAV:")
    for i, wav_file in enumerate(wav_files, 1):
        print(f"   {i}. {wav_file}")
    
    # Test v·ªõi file ƒë·∫ßu ti√™n
    if wav_files:
        first_file = str(wav_files[0])
        print(f"\nüß™ Test v·ªõi file: {first_file}")
        
        result = test_wav2vec2_vietnamese(first_file)
        
        if result.get("success"):
            print(f"\nüéâ Demo th√†nh c√¥ng!")
            print(f"üìù Text: {result.get('text')}")
        else:
            print(f"\n‚ùå Demo th·∫•t b·∫°i: {result.get('error')}")

if __name__ == "__main__":
    # Import torch ·ªü ƒë√¢y ƒë·ªÉ tr√°nh l·ªói khi ch·∫°y
    try:
        import torch
    except ImportError:
        print("‚ùå C·∫ßn c√†i ƒë·∫∑t PyTorch: pip install torch torchaudio")
        sys.exit(1)
    
    # Test v·ªõi command line arguments
    if len(sys.argv) > 1:
        main()
    else:
        # Demo mode
        print("üîß DEMO MODE - Ch·∫°y tr·ª±c ti·∫øp")
        print("ƒê·ªÉ s·ª≠ d·ª•ng command line:")
        print("python test_wav2vec2_vietnamese.py <file_wav> [--output <output.json>]")
        print("\nV√≠ d·ª•:")
        print("python test_wav2vec2_vietnamese.py audio.wav")
        print("python test_wav2vec2_vietnamese.py audio.wav --output result.json")
        print("python test_wav2vec2_vietnamese.py audio.wav --no-audio-info")
        
        print("\n" + "=" * 80)
        
        # Ch·∫°y demo
        demo_with_sample_files()
