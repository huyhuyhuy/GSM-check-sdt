#!/usr/bin/env python3
"""
Build script ƒë·ªÉ t·∫°o file exe ƒë·ªôc l·∫≠p cho GSM Phone Number Checker
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def ensure_pyinstaller() -> bool:
    """ƒê·∫£m b·∫£o PyInstaller ƒë√£ c√≥; n·∫øu ch∆∞a th√¨ t·ª± c√†i ƒë·∫∑t v·ªõi version ph√π h·ª£p."""
    try:
        import PyInstaller  # type: ignore
        print(f"‚úì PyInstaller version: {PyInstaller.__version__}")
        return True
    except ImportError:
        # Detect Python version v√† ch·ªçn PyInstaller version ph√π h·ª£p
        python_version = sys.version_info
        print(f"üêç Python version: {python_version.major}.{python_version.minor}.{python_version.micro}")
        
        if python_version >= (3, 13):
            # Python 3.13+ c·∫ßn PyInstaller 6.10.0+
            pyinstaller_version = "6.15.0"
            print(f"‚úó PyInstaller ch∆∞a c√≥. ƒêang c√†i ƒë·∫∑t pyinstaller=={pyinstaller_version} (cho Python 3.13+)...")
        elif python_version >= (3, 12):
            # Python 3.12 d√πng 6.3.0+
            pyinstaller_version = "6.8.0"
            print(f"‚úó PyInstaller ch∆∞a c√≥. ƒêang c√†i ƒë·∫∑t pyinstaller=={pyinstaller_version} (cho Python 3.12)...")
        else:
            # Python < 3.12 d√πng 6.3.0
            pyinstaller_version = "6.3.0"
            print(f"‚úó PyInstaller ch∆∞a c√≥. ƒêang c√†i ƒë·∫∑t pyinstaller=={pyinstaller_version}...")
        
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", f"pyinstaller=={pyinstaller_version}"], check=True)
            import PyInstaller  # type: ignore
            print(f"‚úì ƒê√£ c√†i PyInstaller version: {PyInstaller.__version__}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚úó L·ªói c√†i PyInstaller {pyinstaller_version}: {e}")
            # Fallback: th·ª≠ latest version
            print("üîÑ Th·ª≠ c√†i latest version...")
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], check=True)
                import PyInstaller  # type: ignore
                print(f"‚úì ƒê√£ c√†i PyInstaller latest version: {PyInstaller.__version__}")
                return True
            except subprocess.CalledProcessError as e2:
                print(f"‚úó L·ªói c√†i PyInstaller latest: {e2}")
                return False


def install_pyaudio() -> bool:
    """C√†i ƒë·∫∑t PyAudio v·ªõi x·ª≠ l√Ω ƒë·∫∑c bi·ªát cho Windows"""
    try:
        import pyaudio
        print("‚úì PyAudio ƒë√£ c√≥ s·∫µn")
        return True
    except ImportError:
        print("üì¶ ƒêang c√†i ƒë·∫∑t PyAudio...")
        try:
            # Th·ª≠ c√†i PyAudio b·∫±ng pip (th∆∞·ªùng work tr√™n Windows v·ªõi wheel)
            subprocess.run([sys.executable, "-m", "pip", "install", "pyaudio"], check=True)
            print("‚úì C√†i ƒë·∫∑t PyAudio th√†nh c√¥ng")
            return True
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è L·ªói c√†i PyAudio b·∫±ng pip. Th·ª≠ pipwin...")
            try:
                # Fallback: S·ª≠ d·ª•ng pipwin cho Windows
                subprocess.run([sys.executable, "-m", "pip", "install", "pipwin"], check=True)
                subprocess.run([sys.executable, "-m", "pipwin", "install", "pyaudio"], check=True)
                print("‚úì C√†i ƒë·∫∑t PyAudio th√†nh c√¥ng qua pipwin")
                return True
            except subprocess.CalledProcessError as e:
                print(f"‚úó L·ªói c√†i PyAudio: {e}")
                print("üí° Th·ªß c√¥ng: T·∫£i wheel t·ª´ https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyaudio")
                return False


def install_requirements() -> bool:
    """C√†i ƒë·∫∑t requirements n·∫øu c√≥ file requirements.txt (t√πy ch·ªçn)."""
    req_path = "requirements.txt"
    if not os.path.exists(req_path):
        print("(B·ªè qua) Kh√¥ng c√≥ requirements.txt")
        return True
    
    # C√†i PyAudio ri√™ng tr∆∞·ªõc
    if not install_pyaudio():
        return False
    
    print("üì¶ ƒêang c√†i ƒë·∫∑t th∆∞ vi·ªán t·ª´ requirements.txt...")
    try:
        # C√†i c√°c packages kh√°c (tr·ª´ PyAudio v√¨ ƒë√£ c√†i ri√™ng)
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", req_path, "--ignore-installed", "pyaudio"], check=True)
        print("‚úì C√†i ƒë·∫∑t requirements ho√†n t·∫•t")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó L·ªói c√†i requirements: {e}")
        return False

def clean_build_dirs():
    """D·ªçn d·∫πp th∆∞ m·ª•c build c≈©"""
    dirs_to_clean = ['build', 'dist']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            print(f"ƒêang x√≥a th∆∞ m·ª•c {dir_name}...")
            shutil.rmtree(dir_name)
    
    # X√≥a file .spec c≈©
    spec_file = "gsm_checker.spec"
    if os.path.exists(spec_file):
        os.remove(spec_file)
        print(f"ƒê√£ x√≥a file {spec_file}")

def build_exe():
    """Build file exe"""
    print("üöÄ B·∫Øt ƒë·∫ßu build file exe...")
    
    # L·ªánh PyInstaller
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",                    # T·∫°o 1 file exe duy nh·∫•t
        "--windowed",                   # Kh√¥ng hi·ªÉn th·ªã console window
        "--name=GSM_Phone_Checker",     # T√™n file exe
        "--icon=icon.ico",              # Icon (n·∫øu c√≥)
        "--add-data=README.md;.",       # Th√™m file README
        "--add-data=template_de_lai_loi_nhan_ok.wav;.", # Template audio files
        "--add-data=template_so_khong_dung_ok.wav;.",
        "--add-data=template_thue_bao_ok.wav;.",
        "--hidden-import=serial",       # Import th∆∞ vi·ªán serial
        "--hidden-import=serial.tools", # Import tools c·ªßa serial
        "--hidden-import=tkinter",      # Import tkinter
        "--hidden-import=tkinter.ttk",  # Import ttk
        "--hidden-import=tkinter.filedialog", # Import filedialog
        "--hidden-import=tkinter.messagebox", # Import messagebox
        "--hidden-import=tkinter.scrolledtext", # Import scrolledtext
        "--hidden-import=threading",    # Import threading
        "--hidden-import=queue",        # Import queue
        "--hidden-import=logging",      # Import logging
        "--hidden-import=datetime",     # Import datetime
        "--hidden-import=time",         # Import time
        "--hidden-import=os",           # Import os
        "--hidden-import=typing",       # Import typing
        "--hidden-import=matplotlib",   # Import matplotlib cho plotting
        "--hidden-import=matplotlib.pyplot", # Import pyplot
        "--hidden-import=numpy",        # Import numpy
        "--hidden-import=scipy",        # Import scipy
        "--hidden-import=scipy.signal", # Import scipy.signal cho correlation
        "--hidden-import=pyaudio",      # Import pyaudio cho audio recording
        "--clean",                      # D·ªçn d·∫πp cache
        "--noconfirm",                  # Kh√¥ng h·ªèi x√°c nh·∫≠n
        "main_enhanced.py"              # File ch√≠nh (ƒë√£ thay ƒë·ªïi)
    ]
    
    # X√≥a icon n·∫øu kh√¥ng c√≥ file icon
    if not os.path.exists("icon.ico"):
        cmd.remove("--icon=icon.ico")
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file icon.ico, s·∫Ω s·ª≠ d·ª•ng icon m·∫∑c ƒë·ªãnh")
    
    # X√≥a README n·∫øu kh√¥ng c√≥
    if not os.path.exists("README.md"):
        cmd.remove("--add-data=README.md;.")
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file README.md")
    
    # Ki·ªÉm tra template files
    template_files = [
        "template_de_lai_loi_nhan_ok.wav",
        "template_so_khong_dung_ok.wav", 
        "template_thue_bao_ok.wav"
    ]
    
    for template_file in template_files:
        if not os.path.exists(template_file):
            data_arg = f"--add-data={template_file};."
            if data_arg in cmd:
                cmd.remove(data_arg)
            print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y {template_file} - Viettel audio analysis s·∫Ω kh√¥ng ho·∫°t ƒë·ªông")
        else:
            print(f"‚úì T√¨m th·∫•y template: {template_file}")
    
    try:
        # Ch·∫°y l·ªánh build
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úì Build th√†nh c√¥ng!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó L·ªói build: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return False

def create_installer_script():
    """T·∫°o script c√†i ƒë·∫∑t ƒë∆°n gi·∫£n"""
    installer_content = """@echo off
echo ========================================
echo    GSM Phone Number Checker Installer
echo ========================================
echo.
echo Dang cai dat ung dung...

REM Tao thu muc cai dat
if not exist "C:\\GSM_Checker" mkdir "C:\\GSM_Checker"

REM Copy file exe
copy "dist\\GSM_Phone_Checker.exe" "C:\\GSM_Checker\\"

REM Tao shortcut tren Desktop
echo Set oWS = WScript.CreateObject("WScript.Shell") > CreateShortcut.vbs
echo sLinkFile = "%USERPROFILE%\\Desktop\\GSM Phone Checker.lnk" >> CreateShortcut.vbs
echo Set oLink = oWS.CreateShortcut(sLinkFile) >> CreateShortcut.vbs
echo oLink.TargetPath = "C:\\GSM_Checker\\GSM_Phone_Checker.exe" >> CreateShortcut.vbs
echo oLink.WorkingDirectory = "C:\\GSM_Checker" >> CreateShortcut.vbs
echo oLink.Description = "GSM Phone Number Checker" >> CreateShortcut.vbs
echo oLink.Save >> CreateShortcut.vbs
cscript //nologo CreateShortcut.vbs
del CreateShortcut.vbs

echo.
echo ========================================
echo    Cai dat hoan thanh!
echo ========================================
echo.
echo Ung dung da duoc cai dat tai: C:\\GSM_Checker\\
echo Shortcut da duoc tao tren Desktop
echo.
pause
"""
    
    with open("install.bat", "w", encoding="utf-8") as f:
        f.write(installer_content)
    print("‚úì ƒê√£ t·∫°o file install.bat")

def create_readme_exe():
    """T·∫°o file README cho ng∆∞·ªùi d√πng exe"""
    readme_content = """# GSM Phone Number Checker - Phi√™n b·∫£n EXE

## C√°ch s·ª≠ d·ª•ng:

### 1. Ch·∫°y ·ª©ng d·ª•ng:
- Double-click v√†o file `GSM_Phone_Checker.exe`
- Ho·∫∑c ch·∫°y t·ª´ Command Prompt: `GSM_Phone_Checker.exe`

### 2. Chu·∫©n b·ªã:
- K·∫øt n·ªëi thi·∫øt b·ªã GSM 32 c·ªïng v√†o m√°y t√≠nh
- Chu·∫©n b·ªã file txt ch·ª©a danh s√°ch s·ªë ƒëi·ªán tho·∫°i (m·ªói s·ªë m·ªôt d√≤ng)

### 3. S·ª≠ d·ª•ng:
1. Nh·∫•n "Nh·∫≠p File" ƒë·ªÉ ch·ªçn file danh s√°ch s·ªë ƒëi·ªán tho·∫°i
2. Nh·∫•n "B·∫Øt ƒê·∫ßu" ƒë·ªÉ b·∫Øt ƒë·∫ßu ki·ªÉm tra
3. Theo d√µi ti·∫øn ƒë·ªô trong khung log
4. Nh·∫•n "Xu·∫•t K·∫øt Qu·∫£" ƒë·ªÉ l∆∞u k·∫øt qu·∫£

### 4. K·∫øt qu·∫£:
- File k·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c `results/`
- `active_numbers_YYYYMMDD_HHMMSS.txt`: C√°c s·ªë c√≤n ho·∫°t ƒë·ªông
- `inactive_numbers_YYYYMMDD_HHMMSS.txt`: C√°c s·ªë kh√¥ng ho·∫°t ƒë·ªông

## L∆∞u √Ω:
- ƒê·∫£m b·∫£o thi·∫øt b·ªã GSM ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t driver
- C√≥ th·ªÉ m·∫•t ph√≠ cu·ªôc g·ªçi khi ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
- Tool s·∫Ω t·ª± ƒë·ªông h·ªßy cu·ªôc g·ªçi sau khi ki·ªÉm tra

## H·ªó tr·ª£:
N·∫øu g·∫∑p l·ªói, vui l√≤ng ki·ªÉm tra:
1. Thi·∫øt b·ªã GSM ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi ƒë√∫ng c√°ch
2. Driver ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
3. File danh s√°ch s·ªë ƒëi·ªán tho·∫°i ƒë√∫ng ƒë·ªãnh d·∫°ng

---
Phi√™n b·∫£n: 1.0
Ng√†y ph√°t h√†nh: 2024
"""
    
    with open("README_EXE.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)
    print("‚úì ƒê√£ t·∫°o file README_EXE.txt")

def main():
    """H√†m ch√≠nh"""
    print("=" * 50)
    print("    GSM Phone Number Checker - Build Tool")
    print("=" * 50)
    print()
    
    # Ki·ªÉm tra PyInstaller
    if not ensure_pyinstaller():
        return False
    
    # Skip install requirements n·∫øu PyAudio ƒë√£ c√≥
    try:
        import pyaudio
        print("‚úì PyAudio ƒë√£ c√≥ - Skip install requirements")
    except ImportError:
        # C√†i requirements n·∫øu PyAudio ch∆∞a c√≥
        if not install_requirements():
            return False

    # D·ªçn d·∫πp th∆∞ m·ª•c build c≈©
    clean_build_dirs()
    
    # Build exe
    if not build_exe():
        return False
    
    # T·∫°o file h·ªó tr·ª£
    create_installer_script()
    create_readme_exe()
    
    print()
    print("=" * 50)
    print("    BUILD HO√ÄN TH√ÄNH!")
    print("=" * 50)
    print()
    print("üìÅ File exe: dist/GSM_Phone_Checker.exe")
    print("üìÅ Script c√†i ƒë·∫∑t: install.bat")
    print("üìÅ H∆∞·ªõng d·∫´n: README_EXE.txt")
    print()
    print("üéØ ƒê·ªÉ ph√¢n ph·ªëi:")
    print("1. Copy file dist/GSM_Phone_Checker.exe")
    print("2. Copy file README_EXE.txt")
    print("3. Copy file install.bat (t√πy ch·ªçn)")
    print()
    print("‚úÖ Ng∆∞·ªùi d√πng ch·ªâ c·∫ßn ch·∫°y file exe, kh√¥ng c·∫ßn c√†i th√™m g√¨!")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1) 