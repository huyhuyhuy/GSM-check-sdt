import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import time
import json
import os
from controller import GSMController

class AudioClassificationGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Phone Number Classification System")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # Thi·∫øt l·∫≠p icon cho ·ª©ng d·ª•ng
        self.set_app_icon()
        
        self.setup_ui()
        self.setup_styles()
    
    def set_app_icon(self):
        """Thi·∫øt l·∫≠p icon cho ·ª©ng d·ª•ng"""
        try:
            # Th·ª≠ load icon t·ª´ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
            icon_path = "icon.ico"
            if os.path.exists(icon_path):
                self.root.iconbitmap(icon_path)
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t·ª´ th∆∞ m·ª•c c·ªßa script
                script_dir = os.path.dirname(os.path.abspath(__file__))
                icon_path = os.path.join(script_dir, "icon.ico")
                if os.path.exists(icon_path):
                    self.root.iconbitmap(icon_path)
                else:
                    # N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, b·ªè qua (kh√¥ng crash)
                    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file icon.ico - b·ªè qua thi·∫øt l·∫≠p icon")
        except Exception as e:
            # B·ªè qua l·ªói icon ƒë·ªÉ kh√¥ng crash ·ª©ng d·ª•ng
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ thi·∫øt l·∫≠p icon: {e}")
        
    def setup_styles(self):
        """Thi·∫øt l·∫≠p style cho giao di·ªán"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Style cho buttons - t∆∞∆°ng ƒë·ªìng v·ªõi header
        style.configure('Action.TButton', 
                       background='#1976D2',      # N·ªÅn xanh ƒë·∫≠m nh∆∞ header
                       foreground='white',        # Ch·ªØ tr·∫Øng
                       font=('Arial', 9, 'bold'), # Font gi·ªëng header
                       padding=(10, 5),           # Padding r·ªông h∆°n
                       relief='flat',             # Kh√¥ng vi·ªÅn n·ªïi
                       borderwidth=0)             # Kh√¥ng vi·ªÅn
        
        # Style cho button khi hover
        style.map('Action.TButton',
                 background=[('active', '#1565C0'),    # Xanh ƒë·∫≠m h∆°n khi hover
                            ('pressed', '#0D47A1')])  # Xanh r·∫•t ƒë·∫≠m khi click
        
        # Style cho labels
        style.configure('Title.TLabel',
                       font=('Arial', 12, 'bold'),
                       foreground='#2c3e50')
        
        style.configure('Info.TLabel',
                       font=('Arial', 9),
                       foreground='#34495e')
        
        # Style cho Treeview header - n·ªÅn xanh ƒë·∫≠m, ch·ªØ tr·∫Øng, in ƒë·∫≠m
        style.configure('Treeview.Heading',
                       background='#1976D2',  # Xanh ƒë·∫≠m
                       foreground='white',     # Ch·ªØ tr·∫Øng
                       font=('Arial', 9, 'bold'),
                       relief='flat')
        
        # Style cho Treeview cells
        style.configure('Treeview',
                       background='white',
                       foreground='black',
                       font=('Arial', 9),
                       rowheight=25)
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # C·∫•u h√¨nh grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.columnconfigure(3, weight=1)
        main_frame.rowconfigure(2, weight=1)  # Treeview frame chi·∫øm 1/4
        main_frame.rowconfigure(3, weight=3)  # Log frame chi·∫øm 3/4
        
        # Frame cho buttons - 4 n√∫t x·∫øp 1 h√†ng
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=0, column=0, columnspan=4, pady=(0, 5))
        button_frame.columnconfigure(0, weight=1)
        button_frame.columnconfigure(1, weight=1)
        button_frame.columnconfigure(2, weight=1)
        button_frame.columnconfigure(3, weight=1)
        
        # N√∫t ch·ªçn file
        self.select_file_btn = ttk.Button(button_frame, 
                                         text="Nh·∫≠p File", 
                                         command=self.select_file,
                                         style='Action.TButton',
                                         width=12)
        self.select_file_btn.grid(row=0, column=0, padx=(0, 3))
        
        # N√∫t b·∫Øt ƒë·∫ßu
        self.start_btn = ttk.Button(button_frame, 
                                   text="B·∫Øt ƒê·∫ßu", 
                                   command=self.start_processing,
                                   style='Action.TButton',
                                   width=12)
        self.start_btn.grid(row=0, column=1, padx=(0, 3))
        
        # N√∫t d·ª´ng
        self.stop_btn = ttk.Button(button_frame, 
                                  text="D·ª´ng", 
                                  command=self.stop_processing,
                                  state='disabled',
                                  style='Action.TButton',
                                  width=12)
        self.stop_btn.grid(row=0, column=2, padx=(0, 3))
        
        # N√∫t xu·∫•t k·∫øt qu·∫£
        self.export_btn = ttk.Button(button_frame, 
                                    text="Xu·∫•t K·∫øt Qu·∫£", 
                                    command=self.export_results,
                                    style='Action.TButton',
                                    width=12)
        self.export_btn.grid(row=0, column=3, padx=(0, 3))
        
        # Frame cho Treeview GSM
        tree_frame = ttk.LabelFrame(main_frame, text="Danh S√°ch GSM", padding="5")
        tree_frame.grid(row=2, column=0, columnspan=4, pady=(0, 5), sticky=(tk.W, tk.E, tk.N, tk.S))
        tree_frame.columnconfigure(0, weight=1)
        tree_frame.rowconfigure(0, weight=1)

        # t·∫°o 1 v√πng ch·ª©a list c√°c ƒë·ªëi t∆∞·ª£ng l√† c√°c c·ªïng GSM qu√©t ƒë∆∞·ª£c
        # m·ªói h√†ng s·∫Ω chia th√†nh 6 c·ªôt: stt, s·ªë c·ªïng GSM, tr·∫°ng th√°i sim, nh√† m·∫°ng, s·ªë ƒëi·ªán tho·∫°i tr√™n c·ªïng ƒë√≥, s·ªë ti·ªÅn c√≤n l·∫°i c·ªßa sim ƒë√≥
        self.gsm_list = ttk.Treeview(tree_frame, columns=("stt", "COM", "sim status", "network operator", "phone number", "remaining balance"), show="headings")
        
        # Thi·∫øt l·∫≠p header v·ªõi style ƒë·∫πp h∆°n
        self.gsm_list.heading("stt", text="STT", anchor="center")
        self.gsm_list.heading("COM", text="C·ªïng GSM", anchor="center")
        self.gsm_list.heading("sim status", text="T√≠n Hi·ªáu S√≥ng", anchor="center")
        self.gsm_list.heading("network operator", text="Nh√† M·∫°ng", anchor="center")
        self.gsm_list.heading("phone number", text="S·ªë ƒêi·ªán Tho·∫°i", anchor="center")
        self.gsm_list.heading("remaining balance", text="S·ªë D∆∞ C√≤n L·∫°i", anchor="center")
        
        # Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt t·ª± ƒë·ªông fit
        self.gsm_list.column("stt", width=60, minwidth=60, anchor="center")
        self.gsm_list.column("COM", width=100, minwidth=100, anchor="center")
        self.gsm_list.column("sim status", width=120, minwidth=120, anchor="center")
        self.gsm_list.column("network operator", width=120, minwidth=120, anchor="center")
        self.gsm_list.column("phone number", width=150, minwidth=150, anchor="center")
        self.gsm_list.column("remaining balance", width=140, minwidth=140, anchor="center")
        
        # Thi·∫øt l·∫≠p m√†u s·∫Øc cho c√°c h√†ng
        self.gsm_list.tag_configure("even", background="#E3F2FD")  # Xanh d∆∞∆°ng nh·∫°t
        self.gsm_list.tag_configure("odd", background="white")     # Tr·∫Øng
        
        self.gsm_list.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Frame cho log
        log_frame = ttk.LabelFrame(main_frame, text="Log Qu√° Tr√¨nh", padding="10")
        log_frame.grid(row=3, column=0, columnspan=4, sticky=(tk.W, tk.E, tk.N, tk.S))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        # Text area cho log
        self.log_text = scrolledtext.ScrolledText(log_frame, 
                                                 font=('Consolas', 9))
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Kh·ªüi t·∫°o
        self.controller = GSMController()
        self.controller.set_log_callback(self.add_log)
        self.phone_file_path = None

        # Hi·ªán loading dialog v√† kh·ªüi t·∫°o h·ªá th·ªëng trong background
        self.show_loading_and_initialize()
    
    def show_loading_and_initialize(self):
        """Hi·ªán loading dialog v√† kh·ªüi t·∫°o h·ªá th·ªëng trong background"""
        # T·∫°o loading dialog
        loading_dialog = tk.Toplevel(self.root)
        loading_dialog.title("ƒêang kh·ªüi t·∫°o...")
        loading_dialog.geometry("400x150")
        loading_dialog.resizable(False, False)

        # Center dialog
        loading_dialog.transient(self.root)
        loading_dialog.grab_set()

        # Frame ch·ª©a n·ªôi dung
        frame = ttk.Frame(loading_dialog, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)

        # Label th√¥ng b√°o
        label = ttk.Label(frame,
                         text="üîç ƒêang qu√©t v√† kh·ªüi t·∫°o c√°c c·ªïng GSM...\nVui l√≤ng ƒë·ª£i...",
                         font=('Arial', 11),
                         justify=tk.CENTER)
        label.pack(pady=10)

        # Progress bar
        progress = ttk.Progressbar(frame, mode='indeterminate', length=300)
        progress.pack(pady=10)
        progress.start(10)

        # Status label
        status_label = ttk.Label(frame,
                                text="ƒêang qu√©t c·ªïng COM...",
                                font=('Arial', 9),
                                foreground='#666')
        status_label.pack(pady=5)

        def update_status(message):
            """C·∫≠p nh·∫≠t status label"""
            status_label.config(text=message)

        def init_thread():
            """Thread kh·ªüi t·∫°o h·ªá th·ªëng"""
            try:
                # Qu√©t c√°c c·ªïng GSM
                self.root.after(0, lambda: update_status("üîç ƒêang qu√©t c·ªïng COM..."))
                self.add_log("üîç Qu√©t c√°c c·ªïng GSM...")
                gsm_ports = self.controller.scan_gsm_ports()

                if gsm_ports:
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ qu√©t
                    self.root.after(0, lambda: update_status(f"‚úÖ T√¨m th·∫•y {len(gsm_ports)} c·ªïng GSM"))
                    self.display_gsm_ports(gsm_ports)
                    self.add_log(f"‚úÖ T√¨m th·∫•y {len(gsm_ports)} c·ªïng GSM")

                    # GSM instances ƒë√£ ƒë∆∞·ª£c t·∫°o trong scan_gsm_ports
                    self.add_log("‚úÖ GSM instances ƒë√£ s·∫µn s√†ng!")
                else:
                    self.add_log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªïng GSM n√†o")
                    # Hi·ªÉn th·ªã th√¥ng b√°o
                    self.display_no_gsm_found()

            except Exception as e:
                self.add_log(f"‚ùå L·ªói kh·ªüi t·∫°o: {e}")
                import traceback
                self.add_log(traceback.format_exc())

            finally:
                # ƒê√≥ng loading dialog
                self.root.after(100, loading_dialog.destroy)

        # B·∫Øt ƒë·∫ßu thread kh·ªüi t·∫°o
        threading.Thread(target=init_thread, daemon=True).start()

    def initialize_system(self):
        """Kh·ªüi t·∫°o h·ªá th·ªëng (deprecated - d√πng show_loading_and_initialize thay th·∫ø)"""
        self.show_loading_and_initialize()
    
    def display_gsm_ports(self, gsm_ports):
        """Hi·ªÉn th·ªã danh s√°ch c·ªïng GSM trong Treeview (s·∫Øp x·∫øp theo c·ªïng COM tƒÉng d·∫ßn)"""
        # X√≥a d·ªØ li·ªáu c≈©
        for item in self.gsm_list.get_children():
            self.gsm_list.delete(item)

        # S·∫Øp x·∫øp theo c·ªïng COM tƒÉng d·∫ßn (COM3, COM36, COM37, COM39, ...)
        def extract_com_number(gsm_info):
            """Tr√≠ch xu·∫•t s·ªë t·ª´ c·ªïng COM ƒë·ªÉ s·∫Øp x·∫øp"""
            port = gsm_info["port"]
            try:
                # L·∫•y s·ªë t·ª´ "COM37" -> 37
                return int(port.replace("COM", ""))
            except:
                return 999  # N·∫øu kh√¥ng parse ƒë∆∞·ª£c, ƒë·∫©y xu·ªëng cu·ªëi

        sorted_gsm_ports = sorted(gsm_ports, key=extract_com_number)

        # Th√™m d·ªØ li·ªáu m·ªõi (ƒë√£ s·∫Øp x·∫øp)
        for i, gsm_info in enumerate(sorted_gsm_ports, 1):
            data = (
                str(i),
                gsm_info["port"],
                gsm_info["signal"],  # Thay v√¨ status, d√πng signal
                gsm_info.get("network_operator", "Kh√¥ng x√°c ƒë·ªãnh"),
                gsm_info["phone_number"],
                gsm_info["balance"]
            )

            # X√°c ƒë·ªãnh tag d·ª±a tr√™n s·ªë th·ª© t·ª± (0-based)
            tag = "even" if i % 2 == 0 else "odd"
            self.gsm_list.insert("", "end", values=data, tags=(tag,))
    
    def display_no_gsm_found(self):
        """Hi·ªÉn th·ªã th√¥ng b√°o khi kh√¥ng t√¨m th·∫•y GSM"""
        # X√≥a d·ªØ li·ªáu c≈©
        for item in self.gsm_list.get_children():
            self.gsm_list.delete(item)
        
        # Th√™m th√¥ng b√°o v·ªõi ƒë·ªß 6 c·ªôt
        self.gsm_list.insert("", "end", values=(
            "1", "Kh√¥ng t√¨m th·∫•y", "N/A", "N/A", "N/A", "N/A"
        ))
    
    def select_file(self):
        """Ch·ªçn file danh s√°ch s·ªë ƒëi·ªán tho·∫°i"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file danh s√°ch s·ªë ƒëi·ªán tho·∫°i",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            self.phone_file_path = file_path
            self.add_log(f"üìÅ ƒê√£ ch·ªçn file: {os.path.basename(file_path)}")
            
            # T·∫£i danh s√°ch s·ªë ƒëi·ªán tho·∫°i
            if self.controller.load_phone_list(file_path):
                self.add_log("‚úÖ ƒê√£ t·∫£i danh s√°ch s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng!")
            else:
                self.add_log("‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·ªë ƒëi·ªán tho·∫°i")
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ t·∫£i file danh s√°ch s·ªë ƒëi·ªán tho·∫°i")
    
    def start_processing(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω"""
        if not self.phone_file_path:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn file danh s√°ch s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc!")
            return
        
        if not self.controller.gsm_instances:
            messagebox.showerror("L·ªói", "Kh√¥ng c√≥ thi·∫øt b·ªã GSM n√†o ƒë∆∞·ª£c k·∫øt n·ªëi!")
            return
        
        # X√≥a k·∫øt qu·∫£ c≈©
        self.controller.clear_results()
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
        self.start_btn.config(state='disabled')
        self.stop_btn.config(state='normal')
        
        # B·∫Øt ƒë·∫ßu x·ª≠ l√Ω
        self.controller.start_processing()
        self.add_log("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω s·ªë ƒëi·ªán tho·∫°i...")
    
    def stop_processing(self):
        """D·ª´ng qu√° tr√¨nh x·ª≠ l√Ω"""
        self.controller.stop_processing()
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
        self.start_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        
        self.add_log("üõë ƒê√£ d·ª´ng x·ª≠ l√Ω")
    
    def export_results(self):
        """Xu·∫•t k·∫øt qu·∫£ ra file Excel"""
        if not any(self.controller.results.values()):
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë·ªÉ xu·∫•t!")
            return
        
        # Ch·ªçn n∆°i l∆∞u file
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u k·∫øt qu·∫£ Excel",
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
        )
        
        if file_path:
            if self.controller.export_results(file_path):
                self.add_log(f"‚úÖ ƒê√£ xu·∫•t k·∫øt qu·∫£ ra: {os.path.basename(file_path)}")
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file:\n{file_path}")
            else:
                self.add_log("‚ùå Kh√¥ng th·ªÉ xu·∫•t k·∫øt qu·∫£")
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ xu·∫•t k·∫øt qu·∫£ ra file Excel")
    
    def add_log(self, message: str):
        """Th√™m log v√†o text area"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
    
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng v·ªõi shutdown dialog"""
        # H·ªèi x√°c nh·∫≠n tr∆∞·ªõc khi tho√°t
        if messagebox.askyesno("X√°c nh·∫≠n tho√°t",
                               "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?\n\n"
                               "H·ªá th·ªëng s·∫Ω d·ª´ng x·ª≠ l√Ω v√† reset t·∫•t c·∫£ GSM instances."):
            self.show_shutdown_dialog()

    def show_shutdown_dialog(self):
        """Hi·ªán shutdown dialog v√† th·ª±c hi·ªán cleanup"""
        # T·∫°o shutdown dialog
        shutdown_dialog = tk.Toplevel(self.root)
        shutdown_dialog.title("ƒêang tho√°t...")
        shutdown_dialog.geometry("400x150")
        shutdown_dialog.resizable(False, False)

        # Center dialog
        shutdown_dialog.transient(self.root)
        shutdown_dialog.grab_set()

        # Frame ch·ª©a n·ªôi dung
        frame = ttk.Frame(shutdown_dialog, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)

        # Label th√¥ng b√°o
        label = ttk.Label(frame,
                         text="üîÑ ƒêang d·ª´ng v√† reset c√°c GSM instances...\nVui l√≤ng ƒë·ª£i...",
                         font=('Arial', 11),
                         justify=tk.CENTER)
        label.pack(pady=10)

        # Progress bar
        progress = ttk.Progressbar(frame, mode='indeterminate', length=300)
        progress.pack(pady=10)
        progress.start(10)

        # Status label
        status_label = ttk.Label(frame,
                                text="ƒêang d·ª´ng x·ª≠ l√Ω...",
                                font=('Arial', 9),
                                foreground='#666')
        status_label.pack(pady=5)

        def update_status(message):
            """C·∫≠p nh·∫≠t status label"""
            try:
                status_label.config(text=message)
            except:
                pass  # Dialog c√≥ th·ªÉ ƒë√£ b·ªã ƒë√≥ng

        def shutdown_thread():
            """Thread th·ª±c hi·ªán shutdown"""
            try:
                # B∆∞·ªõc 1: D·ª´ng x·ª≠ l√Ω n·∫øu ƒëang ch·∫°y
                if self.controller.is_running:
                    self.root.after(0, lambda: update_status("üõë ƒêang d·ª´ng x·ª≠ l√Ω..."))
                    self.add_log("üõë ƒêang d·ª´ng x·ª≠ l√Ω...")
                    self.controller.stop_processing()
                    self.add_log("‚úÖ ƒê√£ d·ª´ng x·ª≠ l√Ω")

                # B∆∞·ªõc 2: Reset cu·ªëi c√πng t·∫•t c·∫£ GSM instances (song song)
                num_instances = len(self.controller.gsm_instances)
                if num_instances > 0:
                    self.root.after(0, lambda: update_status(f"üîÑ ƒêang reset {num_instances} GSM instances..."))
                    self.add_log(f"üîÑ ƒêang reset cu·ªëi c√πng {num_instances} GSM instances...")
                    self.controller.final_reset_all_instances()
                    self.add_log("‚úÖ ƒê√£ reset t·∫•t c·∫£ GSM instances")

                # B∆∞·ªõc 3: Ho√†n th√†nh
                self.root.after(0, lambda: update_status("‚úÖ Ho√†n th√†nh!"))
                self.add_log("‚úÖ ƒê√≥ng ch∆∞∆°ng tr√¨nh th√†nh c√¥ng!")

            except Exception as e:
                self.add_log(f"‚ùå L·ªói khi ƒë√≥ng ch∆∞∆°ng tr√¨nh: {e}")
                import traceback
                self.add_log(traceback.format_exc())

            finally:
                # ƒê√≥ng shutdown dialog v√† main window
                self.root.after(500, shutdown_dialog.destroy)
                self.root.after(600, self.root.destroy)

        # B·∫Øt ƒë·∫ßu thread shutdown
        threading.Thread(target=shutdown_thread, daemon=True).start()

def main():
    root = tk.Tk()
    app = AudioClassificationGUI(root)
    
    # X·ª≠ l√Ω ƒë√≥ng ·ª©ng d·ª•ng
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    root.mainloop()

if __name__ == "__main__":
    main()
