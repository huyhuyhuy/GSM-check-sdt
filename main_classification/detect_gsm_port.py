"""
Qu√©t t·∫•t c·∫£ COM ports, m·ªü ·ªü baudrate 115200, g·ª≠i "AT" v√† n·∫øu nh·∫≠n ƒë∆∞·ª£c "OK" -> ƒë√°nh d·∫•u l√† modem.
"""

import time
import json
from serial import Serial, SerialException
from serial.tools import list_ports

CMD = "AT\r"
OPEN_TIMEOUT = 1.0   # timeout khi m·ªü c·ªïng
REPLY_WAIT = 1.0     # th·ªùi gian ch·ªù ƒë·ªçc reply (s)

def list_com_ports():
    return [p.device for p in list_ports.comports()]

def probe_port(port):
    """M·ªü port v·ªõi baud 115200, g·ª≠i AT, ƒë·ªçc ph·∫£n h·ªìi trong REPLY_WAIT gi√¢y."""
    try:
        ser = Serial(port=port, baudrate=115200, timeout=0.1, write_timeout=0.5)
    except SerialException as e:
        return {"port": port, "ok": False, "reason": f"cannot open: {e}"}
    except Exception as e:
        return {"port": port, "ok": False, "reason": f"open error: {e}"}

    try:
        # flush input/output, m·ªôt v√†i thi·∫øt b·ªã c·∫ßn th·ªùi gian ƒë·ªÉ ·ªïn ƒë·ªãnh
        ser.reset_input_buffer()
        ser.reset_output_buffer()
        time.sleep(0.05)

        ser.write(CMD.encode())
        ser.flush()

        # ƒë·ªçc trong kho·∫£ng REPLY_WAIT gi√¢y
        end = time.time() + REPLY_WAIT
        collected = b""
        while time.time() < end:
            try:
                n = ser.in_waiting
            except Exception:
                n = 0
            if n:
                collected += ser.read(n)
            else:
                time.sleep(0.05)

        text = collected.decode(errors="ignore").strip()
        ser.close()

        # t√¨m "OK" trong reply (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        if "ok" in text.lower():
            return {"port": port, "ok": True, "reply": text}
        else:
            return {"port": port, "ok": False, "reply": text or "<no reply>"}
    except Exception as e:
        try:
            ser.close()
        except Exception:
            pass
        return {"port": port, "ok": False, "reason": f"probe error: {e}"}


#!/usr/bin/env python3
"""
detect_gsm_extended.py

Qu√©t c·ªïng COM (baud 115200). N·∫øu port tr·∫£ l·ªùi "OK" v·ªõi l·ªánh AT th√¨ coi l√† modem.
Sau ƒë√≥ l·∫•y th√™m th√¥ng tin:
 - T√≠n hi·ªáu m·∫°ng (AT+CSQ)
 - S·ªë ƒëi·ªán tho·∫°i c·ªßa SIM (AT+CNUM)
 - S·ªë ti·ªÅn t√†i kho·∫£n (th·ª≠ nghƒ©a v·ª• USSD b·∫±ng AT+CUSD)

Usage:
    pip install pyserial
    python detect_gsm_extended.py
"""

BAUD = 115200
AT_CMD = "AT\r"
OPEN_TIMEOUT = 1.0
REPLY_WAIT = 1.0    # base wait for simple AT replies
LONG_WAIT = 5.0     # wait for USSD reply (USSD c√≥ th·ªÉ m·∫•t v√†i gi√¢y)

# Danh s√°ch m√£ USSD th·ª≠ (th√¥ng d·ª•ng ·ªü VN nh∆∞ng kh√¥ng ch·∫Øc ch·∫Øn v·ªõi m·ªçi nh√† m·∫°ng)
USSD_CODES = ["*101#", "*101*1#", "*123#", "*100#"]

def list_com_ports():
    return [p.device for p in list_ports.comports()]

def read_all(ser, wait_time):
    """ƒê·ªçc d·ªØ li·ªáu trong wait_time gi√¢y (polling)"""
    end = time.time() + wait_time
    collected = b""
    while time.time() < end:
        try:
            n = ser.in_waiting
        except Exception:
            n = 0
        if n:
            try:
                collected += ser.read(n)
            except Exception:
                pass
        else:
            time.sleep(0.05)
    try:
        return collected.decode(errors="ignore").strip()
    except Exception:
        return str(collected)

def send_at_and_read(ser, cmd, wait=REPLY_WAIT, log_callback=None):
    """G·ª≠i m·ªôt l·ªánh AT (chu·ªói ƒë√£ k√®m CR n·∫øu c·∫ßn) v√† ƒë·ªçc tr·∫£ l·ªùi"""
    if log_callback:
        log_callback(f"üì§ G·ª≠i l·ªánh: {cmd}")
    
    if not cmd.endswith("\r"):
        cmd = cmd + "\r"
    try:
        ser.reset_input_buffer()
        ser.reset_output_buffer()
    except Exception:
        pass
    
    ser.write(cmd.encode(errors="ignore"))
    ser.flush()
    
    # ƒê·ªçc response v·ªõi th·ªùi gian ch·ªù
    response = read_all(ser, wait)
    if log_callback:
        log_callback(f"üì• Response: {response[:50]}...")
    
    return response

def probe_port_simple(port):
    """M·ªü port ·ªü BAUD, g·ª≠i AT, n·∫øu reply ch·ª©a OK -> valid"""
    try:
        ser = Serial(port=port, baudrate=BAUD, timeout=0.1, write_timeout=0.5)
    except SerialException as e:
        return {"port": port, "ok": False, "reason": f"open error: {e}"}
    except Exception as e:
        return {"port": port, "ok": False, "reason": f"open unknown error: {e}"}

    try:
        time.sleep(0.05)
        reply = send_at_and_read(ser, "AT", wait=REPLY_WAIT)
        ser.close()
    except Exception as e:
        try:
            ser.close()
        except Exception:
            pass
        return {"port": port, "ok": False, "reason": f"probe error: {e}"}

    if "ok" in reply.lower():
        return {"port": port, "ok": True, "reply": reply}
    else:
        return {"port": port, "ok": False, "reply": reply or "<no reply>"}

# ---------------- khi x√°c ƒë·ªãnh ƒë∆∞·ª£c c·ªïng COM GSM th√¨ s·ª≠ d·ª•ng c√°c h√†m sau ƒë·ªÉ l·∫•y th√™m th√¥ng tin ----------------

def get_signal_info(ser, log_callback=None):
    """
    G·ª≠i AT+CSQ v√† parse +CSQ: <rssi>,<ber>
    Tr·∫£ v·ªÅ format "25/31" cho GUI
    """
    resp = send_at_and_read(ser, "AT+CSQ", wait=REPLY_WAIT, log_callback=log_callback)
    # t√¨m +CSQ: line
    for line in resp.splitlines():
        line = line.strip()
        if line.upper().startswith("+CSQ"):
            # +CSQ: <rssi>,<ber>
            try:
                parts = line.split(":")[1].strip().split(",")
                rssi = int(parts[0])
                if rssi == 99:
                    return "Kh√¥ng x√°c ƒë·ªãnh"
                signal_str = f"{rssi}/31"
                if log_callback:
                    log_callback(f"üì∂ T√≠n hi·ªáu s√≥ng: {signal_str}")
                return signal_str
            except Exception:
                return "L·ªói ƒë·ªçc"
    # fallback: tr·∫£ v·ªÅ kh√¥ng x√°c ƒë·ªãnh
    return "Kh√¥ng x√°c ƒë·ªãnh"

def get_phone_number(ser):
    """
    Th·ª≠ AT+CNUM ƒë·ªÉ l·∫•y MSISDN (t√πy SIM/nh√† m·∫°ng).
    Format: +CNUM: "NAME","<number>",<type>,<speed>,<service>
    N·∫øu kh√¥ng c√≥ -> tr·∫£ None
    """
    resp = send_at_and_read(ser, "AT+CNUM", wait=REPLY_WAIT)
    # t√¨m +CNUM
    for line in resp.splitlines():
        line = line.strip()
        if line.upper().startswith("+CNUM"):
            # try parse number in quotes
            try:
                # v√≠ d·ª•: +CNUM: "","0123456789",145,7,4
                after = line.split(":",1)[1]
                # l·∫•y t·∫•t c·∫£ c√°c chu·ªói trong d·∫•u ngo·∫∑c k√©p
                quotes = []
                cur = ""
                inq = False
                for ch in after:
                    if ch == '"':
                        inq = not inq
                        if not inq:
                            quotes.append(cur)
                            cur = ""
                    elif inq:
                        cur += ch
                # s·ªë th∆∞·ªùng n·∫±m ·ªü quotes[1] theo format tr√™n
                number = None
                if len(quotes) >= 2 and quotes[1].strip():
                    number = quotes[1].strip()
                else:
                    # fallback: th·ª≠ t√°ch b·∫±ng d·∫•u ph·∫©y, ph·∫ßn th·ª© 1/2 c√≥ v·∫ª l√† s·ªë kh√¥ng trong quotes
                    parts = [p.strip().strip('"') for p in after.split(",")]
                    if parts:
                        # t√¨m ph·∫ßn n√†o c√≥ nhi·ªÅu ch·ªØ s·ªë
                        for p in parts:
                            if any(ch.isdigit() for ch in p) and len([c for c in p if c.isdigit()]) >= 6:
                                number = p
                                break
                return {"raw": line, "number": number}
            except Exception:
                return {"raw": line, "parse_error": True}
    # n·∫øu kh√¥ng c√≥ +CNUM, tr·∫£ v·ªÅ response ƒë·ªÉ debug
    return {"raw": resp, "number": None}

def get_phone_and_balance(ser, log_callback=None):
    """
    G·ª≠i AT+CUSD=1,"*101#",15 v√† parse th√¥ng tin s·ªë ƒëi·ªán tho·∫°i + s·ªë d∆∞
    Tr·∫£ v·ªÅ dict v·ªõi phone_number v√† balance
    """
    if log_callback:
        log_callback("üîç B·∫Øt ƒë·∫ßu g·ª≠i l·ªánh USSD...")
    
    # G·ª≠i l·ªánh USSD
    cmd = 'AT+CUSD=1,"*101#",15'
    resp = send_at_and_read(ser, cmd, wait=3.0, log_callback=log_callback)  # Ch·ªù 3 gi√¢y nh∆∞ y√™u c·∫ßu
    
    if log_callback:
        log_callback(f"üì° USSD Response: {resp[:100]}...")
    
    # Parse response ƒë·ªÉ l·∫•y s·ªë ƒëi·ªán tho·∫°i v√† s·ªë d∆∞
    phone_number = "Kh√¥ng x√°c ƒë·ªãnh"
    balance = "Kh√¥ng x√°c ƒë·ªãnh"
    
    # T√¨m +CUSD line
    found_cusd = False
    for line in resp.splitlines():
        line = line.strip()
        
        if line.upper().startswith("+CUSD"):
            found_cusd = True
            if log_callback:
                log_callback(f"‚úÖ T√¨m th·∫•y +CUSD response")
            
            # +CUSD: 0,"+84996800685. TTGTEL. TKC 5014 d, TK no 0VND, HSD: 00:00 17-11-2025. Quy khach se nhan duoc thong tin TK Khuyen mai qua SMS.",15
            try:
                # T√¨m ph·∫ßn trong quotes
                start = line.find('"')
                end = line.rfind('"')
                
                if start != -1 and end != -1 and end > start:
                    content = line[start+1:end]
                    
                    # Parse s·ªë ƒëi·ªán tho·∫°i - t√¨m pattern +84xxxxxxxxx
                    import re
                    phone_match = re.search(r'\+84\d{9,10}', content)
                    if phone_match:
                        phone_number = phone_match.group(0)
                        if log_callback:
                            log_callback(f"üìû T√¨m th·∫•y s·ªë ƒëi·ªán tho·∫°i: {phone_number}")
                    else:
                        if log_callback:
                            log_callback(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ªë ƒëi·ªán tho·∫°i trong response")
                    
                    # Parse s·ªë d∆∞ - t√¨m pattern "TKC xxxx d"
                    balance_match = re.search(r'TKC\s+(\d+)\s+d', content)
                    if balance_match:
                        balance_amount = balance_match.group(1)
                        balance = f"{balance_amount} VND"
                        if log_callback:
                            log_callback(f"üí∞ T√¨m th·∫•y s·ªë d∆∞: {balance}")
                    else:
                        if log_callback:
                            log_callback(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ªë d∆∞ trong response")
                    
                    return {
                        "phone_number": phone_number,
                        "balance": balance,
                        "raw_content": content
                    }
                else:
                    if log_callback:
                        log_callback(f"‚ùå Kh√¥ng t√¨m th·∫•y quotes trong +CUSD response")
            except Exception as e:
                if log_callback:
                    log_callback(f"‚ùå L·ªói parse USSD response: {e}")
                pass
    
    if not found_cusd:
        if log_callback:
            log_callback(f"‚ùå Kh√¥ng t√¨m th·∫•y +CUSD trong response")
    
    if log_callback:
        log_callback(f"üìä K·∫øt qu·∫£: {phone_number} - {balance}")
    
    return {
        "phone_number": phone_number,
        "balance": balance,
        "raw_content": resp
    }

def main():
    ports = list_com_ports()
    if not ports:
        print("[INFO] Kh√¥ng t√¨m th·∫•y c·ªïng COM/TTY n√†o.")
        return

    print(f"[INFO] Found ports: {ports}")
    results = []
    
    # Buoc 1: Quet tat ca ports de tim GSM
    print("\n=== BUOC 1: QUET CONG GSM ===")
    for p in ports:
        res = probe_port_simple(p)
        results.append(res)
        if res.get("ok"):
            print(f"[FOUND] {p} => replies: {res.get('reply')}")
        else:
            r = res.get("reply") or res.get("reason")
            print(f"[SKIP ] {p} => {r}")

    # Buoc 2: Thu thap thong tin chi tiet tu cac GSM ports
    found = [r for r in results if r.get("ok")]
    if found:
        print("\n=== BUOC 2: THU THAP THONG TIN CHI TIET ===")
        for f in found:
            port = f['port']
            print(f"\n--- Thong tin chi tiet {port} ---")
            
            try:
                ser = Serial(port=port, baudrate=BAUD, timeout=0.1, write_timeout=0.5)
                time.sleep(0.1)
                
                # Lay thong tin tin hieu
                signal_info = get_signal_info(ser)
                print(f"T√≠n hi·ªáu s√≥ng: {signal_info}")
                
                # Lay so dien thoai va so du tu USSD
                phone_balance_info = get_phone_and_balance(ser)
                print(f"S·ªë ƒëi·ªán tho·∫°i: {phone_balance_info['phone_number']}")
                print(f"S·ªë d∆∞: {phone_balance_info['balance']}")
                
                ser.close()
                
            except Exception as e:
                print(f"Loi khi lay thong tin {port}: {e}")
    else:
        print("\n[INFO] Khong tim thay port tra loi 'OK'. Kiem tra driver/permission/thiet bi.")

# File n√†y ch·ªâ ch·ª©a c√°c h√†m utility ƒë·ªÉ qu√©t c·ªïng GSM
# Kh√¥ng c·∫ßn h√†m main v√¨ logic ch√≠nh ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o GSMInstance v√† Controller
