"""
GSM Instance - Qu·∫£n l√Ω t·ª´ng th·ª±c th·ªÉ GSM ƒë·ªôc l·∫≠p
M·ªói instance c√≥ k·∫øt n·ªëi ri√™ng, baudrate ri√™ng, v√† x·ª≠ l√Ω ri√™ng
"""

import serial
import time
import logging
import threading
import os
import re
import subprocess
from typing import Dict, List, Optional, Callable
from pathlib import Path
from datetime import datetime

# Import cho STT v√† ph√¢n lo·∫°i
import torch
import librosa
import soundfile as sf
from pydub import AudioSegment

from string_detection import keyword_in_text, labels
from model_manager import model_manager

# C·∫•u h√¨nh logging - ghi ra file
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)

class GSMInstance:
    """Qu·∫£n l√Ω m·ªôt th·ª±c th·ªÉ GSM v·ªõi ƒë·∫ßy ƒë·ªß ch·ª©c nƒÉng"""

    def __init__(self, port: str, log_callback: Optional[Callable] = None):
        self.port = port
        self.log_callback = log_callback
        self.serial_connection = None
        self.is_connected = False

        # Th√¥ng tin c∆° b·∫£n
        self.signal_strength = "Kh√¥ng x√°c ƒë·ªãnh"
        self.network_operator = "Kh√¥ng x√°c ƒë·ªãnh"
        self.phone_number = "Kh√¥ng x√°c ƒë·ªãnh"
        self.balance = "Kh√¥ng x√°c ƒë·ªãnh"

        # Qu·∫£n l√Ω baudrate
        self.default_baudrate = 115200
        self.working_baudrate = 921600
        self.current_baudrate = self.default_baudrate

        # Qu·∫£n l√Ω cu·ªôc g·ªçi
        self.phone_queue = []
        self.call_count = 0
        self.max_calls_before_reset = 100
        self.status = "idle"  # idle, calling, resetting, error
        self.results = []

        # Threading
        self.processing_thread = None
        self.stop_flag = False

        # Logging ri√™ng cho instance n√†y
        self.logger = logging.getLogger(f"GSMInstance_{port}")
        log_file = os.path.join(log_dir, f"gsm_{port}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
        handler = logging.FileHandler(log_file, encoding='utf-8')
        handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)
        
    def log(self, message: str):
        """G·ª≠i log message"""
        # Log v√†o file
        self.logger.info(message)

        # G·ª≠i l√™n GUI n·∫øu c√≥ callback
        if self.log_callback:
            self.log_callback(f"[{self.port}] {message}")
    
    def connect(self, baudrate: int = None) -> bool:
        """K·∫øt n·ªëi v·ªõi baudrate c·ª• th·ªÉ"""
        if baudrate is None:
            baudrate = self.current_baudrate
            
        try:
            # ƒê√≥ng k·∫øt n·ªëi c≈© n·∫øu c√≥
            self.disconnect()
            
            self.serial_connection = serial.Serial(
                port=self.port,
                baudrate=baudrate,
                timeout=5,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE
            )
            
            self.is_connected = True
            self.current_baudrate = baudrate
            self.log(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi baudrate {baudrate}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            self.is_connected = False
            return False
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi"""
        if self.serial_connection and self.serial_connection.is_open:
            try:
                self.serial_connection.close()
            except:
                pass
        self.is_connected = False
    
    def send_command(self, command: str, wait_time: float = 1.0) -> str:
        """G·ª≠i l·ªánh AT v√† nh·∫≠n ph·∫£n h·ªìi"""
        if not self.is_connected:
            return "ERROR: Not connected"
        
        try:
            # X√≥a buffer
            self.serial_connection.reset_input_buffer()
            self.serial_connection.reset_output_buffer()
            
            # G·ª≠i l·ªánh
            if command:
                self.serial_connection.write((command + '\r\n').encode())
                time.sleep(wait_time)
            
            # ƒê·ªçc ph·∫£n h·ªìi
            response = ""
            start_time = time.time()
            timeout = wait_time + 2
            
            while time.time() - start_time < timeout:
                if self.serial_connection.in_waiting:
                    chunk = self.serial_connection.read(
                        self.serial_connection.in_waiting
                    ).decode('utf-8', errors='ignore')
                    response += chunk
                time.sleep(0.1)
            
            return response.strip()
            
        except Exception as e:
            self.log(f"‚ùå L·ªói g·ª≠i l·ªánh {command}: {e}")
            return f"ERROR: {str(e)}"
    
    def get_basic_info(self) -> Dict[str, str]:
        """L·∫•y th√¥ng tin c∆° b·∫£n: t√≠n hi·ªáu, nh√† m·∫°ng, s·ªë ƒëi·ªán tho·∫°i, s·ªë d∆∞"""
        try:
            self.log("üìã ƒêang l·∫•y th√¥ng tin c∆° b·∫£n...")
            
            # L·∫•y t√≠n hi·ªáu s√≥ng
            signal_response = self.send_command("AT+CSQ")
            if "+CSQ" in signal_response:
                try:
                    parts = signal_response.split("+CSQ: ")[1].split(",")
                    rssi = int(parts[0])
                    if rssi != 99:
                        self.signal_strength = f"{rssi}/31"
                    else:
                        self.signal_strength = "Kh√¥ng x√°c ƒë·ªãnh"
                except:
                    self.signal_strength = "Kh√¥ng x√°c ƒë·ªãnh"
            
            # L·∫•y nh√† m·∫°ng
            operator_response = self.send_command("AT+COPS?")
            if "+COPS" in operator_response:
                try:
                    start = operator_response.find('"')
                    end = operator_response.rfind('"')
                    if start != -1 and end != -1:
                        operator = operator_response[start+1:end].strip()
                        if ' ' in operator:
                            operator = operator.split()[0]
                        self.network_operator = operator
                except:
                    self.network_operator = "Kh√¥ng x√°c ƒë·ªãnh"
            
            # L·∫•y s·ªë ƒëi·ªán tho·∫°i v√† s·ªë d∆∞ qua USSD
            ussd_command = "*101#"  # M·∫∑c ƒë·ªãnh
            if "Vietnamobile" in self.network_operator:
                ussd_command = "*102#"
            
            ussd_response = self.send_command(f'AT+CUSD=1,"{ussd_command}",15', wait_time=3.0)
            
            # Parse USSD response
            import re
            phone_match = re.search(r'\+84\d{9,10}', ussd_response)
            if phone_match:
                self.phone_number = phone_match.group(0)
            
            balance_match = re.search(r'TKC\s+(\d+)\s+d', ussd_response)
            if balance_match:
                balance_amount = balance_match.group(1)
                self.balance = f"{balance_amount} VND"
            
            self.log(f"üìä Th√¥ng tin: {self.phone_number} - {self.balance} - {self.network_operator}")
            
            return {
                "signal": self.signal_strength,
                "network_operator": self.network_operator,
                "phone_number": self.phone_number,
                "balance": self.balance
            }
            
        except Exception as e:
            self.log(f"‚ùå L·ªói l·∫•y th√¥ng tin c∆° b·∫£n: {e}")
            return {
                "signal": "L·ªói",
                "network_operator": "L·ªói",
                "phone_number": "L·ªói",
                "balance": "L·ªói"
            }
    
    def reset_baudrate(self, new_baudrate: int) -> bool:
        """Reset baudrate: ƒë√≥ng ‚Üí k·∫øt n·ªëi 115200 ‚Üí reset ‚Üí k·∫øt n·ªëi new_baudrate"""
        try:
            self.status = "resetting"
            self.log(f"üîÑ ƒêang reset baudrate t·ª´ {self.current_baudrate} ‚Üí {new_baudrate}")
            
            # B∆∞·ªõc 1: ƒê√≥ng k·∫øt n·ªëi hi·ªán t·∫°i
            self.disconnect()
            time.sleep(0.5)
            
            # B∆∞·ªõc 2: K·∫øt n·ªëi v·ªõi baudrate m·∫∑c ƒë·ªãnh
            if not self.connect(self.default_baudrate):
                self.log("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi baudrate m·∫∑c ƒë·ªãnh")
                return False
            
            # B∆∞·ªõc 3: Reset baudrate
            reset_response = self.send_command(f"AT+IPR={new_baudrate}", wait_time=2.0)
            if "ERROR" in reset_response:
                self.log("‚ùå L·ªói reset baudrate")
                return False
            
            # B∆∞·ªõc 4: ƒê√≥ng v√† k·∫øt n·ªëi l·∫°i v·ªõi baudrate m·ªõi
            self.disconnect()
            time.sleep(0.5)
            
            if not self.connect(new_baudrate):
                self.log("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi baudrate m·ªõi")
                return False
            
            self.log(f"‚úÖ Reset baudrate th√†nh c√¥ng: {new_baudrate}")
            self.status = "idle"
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói reset baudrate: {e}")
            self.status = "error"
            return False
    
    def make_call_and_classify(self, phone_number: str) -> Dict:
        """G·ªçi s·ªë v√† ph√¢n lo·∫°i k·∫øt qu·∫£"""
        try:
            self.status = "calling"
            self.log(f"üìû ƒêang g·ªçi {phone_number}...")
            
            # Th·ª±c hi·ªán cu·ªôc g·ªçi
            call_response = self.send_command(f"ATD{phone_number};", wait_time=1.5)
            if "ERROR" in call_response:
                self.log(f"‚ùå Kh√¥ng th·ªÉ g·ªçi {phone_number}")
                return {
                    "phone_number": phone_number,
                    "result": "can_not_connect",
                    "reason": "Kh√¥ng th·ªÉ k·∫øt n·ªëi"
                }
            
            # Ch·ªù 1.5 gi√¢y sau khi g·ªçi
            time.sleep(1.5)
            
            # B·∫Øt ƒë·∫ßu ghi √¢m
            self.log(f"üéôÔ∏è B·∫Øt ƒë·∫ßu ghi √¢m {phone_number}...")
            record_filename = f"record_{self.port}_{int(time.time())}.amr"
            record_response = self.send_command(f'AT+QAUDRD=1,"{record_filename}",13,1', wait_time=1.0)
            
            if "ERROR" in record_response:
                self.log(f"‚ùå Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ghi √¢m cho {phone_number}")
                self.send_command("ATH", wait_time=1.0)
                return {
                    "phone_number": phone_number,
                    "result": "l·ªói",
                    "reason": "Kh√¥ng th·ªÉ ghi √¢m"
                }
            
            # Ghi √¢m 15 gi√¢y v√† check AT+CLCC m·ªói 0.5 gi√¢y
            found_colp = False
            recording_duration = 15  # gi√¢y
            check_interval = 0.5  # gi√¢y
            checks = int(recording_duration / check_interval)
            
            for i in range(checks):
                # Check AT+CLCC
                clcc_response = self.send_command("AT+CLCC", wait_time=0.3)
                
                # Ki·ªÉm tra c√≥ +COLP trong response
                if "+COLP" in clcc_response:
                    self.log(f"‚úÖ Ph√°t hi·ªán +COLP cho {phone_number} - Ng∆∞·ªùi nh·∫•c m√°y!")
                    found_colp = True
                    
                    # D·ª´ng ghi √¢m ngay
                    self.send_command(f'AT+QAUDRD=0,"{record_filename}",13,1', wait_time=1.0)
                    
                    # Ng·∫Øt cu·ªôc g·ªçi
                    self.send_command("ATH", wait_time=1.0)
                    
                    # X√≥a file ghi √¢m v√¨ kh√¥ng c·∫ßn
                    self.send_command(f'AT+QFDEL="{record_filename}"', wait_time=1.0)
                    
                    return {
                        "phone_number": phone_number,
                        "result": "ho·∫°t ƒë·ªông",
                        "reason": "C√≥ ng∆∞·ªùi nh·∫•c m√°y (+COLP detected)"
                    }
                
                # ƒê·ª£i tr∆∞·ªõc khi check ti·∫øp
                time.sleep(check_interval)
            
            # Sau 15 gi√¢y kh√¥ng c√≥ +COLP
            self.log(f"‚è±Ô∏è H·∫øt th·ªùi gian ghi √¢m cho {phone_number} - Kh√¥ng ph√°t hi·ªán +COLP")
            
            # D·ª´ng ghi √¢m
            stop_response = self.send_command(f'AT+QAUDRD=0,"{record_filename}",13,1', wait_time=1.0)
            
            # Ng·∫Øt cu·ªôc g·ªçi
            self.send_command("ATH", wait_time=1.0)
            
            # T·∫£i file ghi √¢m, STT v√† ph√¢n lo·∫°i
            self.log(f"üì• ƒêang t·∫£i file {record_filename} ƒë·ªÉ ph√¢n t√≠ch...")
            
            # T·∫°o t√™n file local
            timestamp = int(time.time())
            local_amr = f"{phone_number}_{self.port}_{timestamp}.amr"
            local_wav = f"{phone_number}_{self.port}_{timestamp}.wav"
            
            # T·∫£i file t·ª´ module v·ªÅ m√°y t√≠nh
            if not self._download_file_via_qfread(record_filename, local_amr):
                self.log(f"‚ùå Kh√¥ng th·ªÉ t·∫£i file {record_filename}")
                return {
                    "phone_number": phone_number,
                    "result": "l·ªói",
                    "reason": "Kh√¥ng th·ªÉ t·∫£i file ghi √¢m"
                }

            # Ki·ªÉm tra file AMR c√≥ h·ª£p l·ªá kh√¥ng (file size > 0)
            if not os.path.exists(local_amr):
                self.log(f"‚ùå File {local_amr} kh√¥ng t·ªìn t·∫°i")
                return {
                    "phone_number": phone_number,
                    "result": "l·ªói",
                    "reason": "File ghi √¢m kh√¥ng t·ªìn t·∫°i"
                }

            file_size = os.path.getsize(local_amr)
            if file_size == 0:
                self.log(f"‚ùå File {local_amr} c√≥ k√≠ch th∆∞·ªõc 0 bytes")
                # X√≥a file l·ªói
                try:
                    os.remove(local_amr)
                except:
                    pass
                return {
                    "phone_number": phone_number,
                    "result": "l·ªói",
                    "reason": "File ghi √¢m r·ªóng (0 bytes)"
                }

            self.log(f"‚úÖ File AMR h·ª£p l·ªá: {file_size} bytes")

            # Convert AMR sang WAV
            if not self._convert_to_wav(local_amr, local_wav):
                self.log(f"‚ùå Kh√¥ng th·ªÉ convert file √¢m thanh")
                return {
                    "phone_number": phone_number,
                    "result": "l·ªói",
                    "reason": "Kh√¥ng th·ªÉ convert file √¢m thanh"
                }
            
            # Speech-to-text
            transcribed_text = self._transcribe_audio(local_wav)
            if not transcribed_text:
                self.log(f"‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán STT")
                return {
                    "phone_number": phone_number,
                    "result": "l·ªói",
                    "reason": "Kh√¥ng th·ªÉ th·ª±c hi·ªán STT"
                }
            
            # Ph√¢n lo·∫°i k·∫øt qu·∫£
            classification_result = self._classify_result(transcribed_text)
            
            # D·ªçn d·∫πp file t·∫°m
            try:
                if os.path.exists(local_amr):
                    os.remove(local_amr)
                if os.path.exists(local_wav):
                    os.remove(local_wav)
                self.log(f"üóëÔ∏è ƒê√£ d·ªçn d·∫πp file t·∫°m")
            except:
                pass
            
            # X√≥a file tr√™n module
            self.send_command(f'AT+QFDEL="{record_filename}"', wait_time=1.0)
            
            return {
                "phone_number": phone_number,
                "result": classification_result,
                "reason": f"STT: {transcribed_text[:50]}..." if len(transcribed_text) > 50 else f"STT: {transcribed_text}",
                "transcribed_text": transcribed_text
            }
                
        except Exception as e:
            self.log(f"‚ùå L·ªói khi g·ªçi {phone_number}: {e}")
            # ƒê·∫£m b·∫£o ng·∫Øt cu·ªôc g·ªçi n·∫øu c√≥ l·ªói
            try:
                self.send_command("ATH", wait_time=1.0)
            except:
                pass
            
            return {
                "phone_number": phone_number,
                "result": "l·ªói",
                "reason": f"L·ªói: {e}"
            }
        finally:
            self.status = "idle"
    
    def set_phone_queue(self, phone_numbers: List[str]):
        """Thi·∫øt l·∫≠p danh s√°ch s·ªë ƒëi·ªán tho·∫°i c·∫ßn g·ªçi"""
        self.phone_queue = phone_numbers.copy()
        self.call_count = 0
        self.results = []
        self.log(f"üìã ƒê√£ nh·∫≠n {len(phone_numbers)} s·ªë ƒëi·ªán tho·∫°i")
    
    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω danh s√°ch s·ªë ƒëi·ªán tho·∫°i"""
        if not self.phone_queue:
            self.log("‚ö†Ô∏è Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ x·ª≠ l√Ω")
            return
        
        if self.processing_thread and self.processing_thread.is_alive():
            self.log("‚ö†Ô∏è ƒêang x·ª≠ l√Ω r·ªìi")
            return
        
        self.stop_flag = False
        self.processing_thread = threading.Thread(target=self._process_phones, daemon=True)
        self.processing_thread.start()
    
    def _process_phones(self):
        """X·ª≠ l√Ω danh s√°ch s·ªë ƒëi·ªán tho·∫°i trong thread ri√™ng"""
        try:
            self.log(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {len(self.phone_queue)} s·ªë ƒëi·ªán tho·∫°i")
            self.log(f"‚ÑπÔ∏è ƒêang s·ª≠ d·ª•ng baudrate {self.current_baudrate} cho vi·ªác g·ªçi")
            
            for phone_number in self.phone_queue:
                if self.stop_flag:
                    self.log("üõë D·ª´ng x·ª≠ l√Ω theo y√™u c·∫ßu")
                    break
                
                # G·ªçi v√† ph√¢n lo·∫°i
                result = self.make_call_and_classify(phone_number)
                self.results.append(result)
                self.call_count += 1
                
                self.log(f"üìä [{self.call_count}/{len(self.phone_queue)}] {phone_number}: {result['result']}")
                
                # Reset sau 100 cu·ªôc g·ªçi
                if self.call_count % self.max_calls_before_reset == 0:
                    self.log(f"üîÑ ƒê√£ g·ªçi {self.call_count} s·ªë, ƒëang reset...")
                    self._reset_and_continue()
                
                # Ngh·ªâ gi·ªØa c√°c cu·ªôc g·ªçi
                time.sleep(2)
            
            self.log(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω {len(self.results)} s·ªë ƒëi·ªán tho·∫°i")
            
        except Exception as e:
            self.log(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
        finally:
            self.status = "idle"
    
    def _reset_and_continue(self):
        """Reset module v√† ti·∫øp t·ª•c v·ªõi baudrate m·∫∑c ƒë·ªãnh"""
        try:
            # Reset v·ªÅ baudrate m·∫∑c ƒë·ªãnh
            if not self.reset_baudrate(self.default_baudrate):
                self.log("‚ùå Kh√¥ng th·ªÉ reset v·ªÅ baudrate m·∫∑c ƒë·ªãnh")
                return
            
            # Load l·∫°i s·ªë d∆∞ v·ªõi baudrate m·∫∑c ƒë·ªãnh
            self.log("üí∞ ƒêang load l·∫°i s·ªë d∆∞...")
            ussd_command = "*101#"  # M·∫∑c ƒë·ªãnh
            if "Vietnamobile" in self.network_operator:
                ussd_command = "*102#"
            
            balance_response = self.send_command(f'AT+CUSD=1,"{ussd_command}",15', wait_time=3.0)
            
            # Parse s·ªë d∆∞ m·ªõi
            import re
            balance_match = re.search(r'TKC\s+(\d+)\s+d', balance_response)
            if balance_match:
                balance_amount = balance_match.group(1)
                self.balance = f"{balance_amount} VND"
                self.log(f"üí∞ S·ªë d∆∞ m·ªõi: {self.balance}")
            else:
                self.log("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y s·ªë d∆∞ m·ªõi")
            
            # Ngh·ªâ ng∆°i 30 gi√¢y
            self.log("üò¥ Ngh·ªâ ng∆°i 30 gi√¢y...")
            time.sleep(30)
            
            # Reset v·ªÅ baudrate l√†m vi·ªác
            if not self.reset_baudrate(self.working_baudrate):
                self.log("‚ùå Kh√¥ng th·ªÉ reset v·ªÅ baudrate l√†m vi·ªác")
                return
            
        except Exception as e:
            self.log(f"‚ùå L·ªói trong qu√° tr√¨nh reset: {e}")
    
    def stop_processing(self):
        """D·ª´ng x·ª≠ l√Ω"""
        self.stop_flag = True
        self.status = "idle"
        self.log("üõë ƒê√£ y√™u c·∫ßu d·ª´ng x·ª≠ l√Ω")
    
    def get_results(self) -> List[Dict]:
        """L·∫•y k·∫øt qu·∫£ x·ª≠ l√Ω"""
        return self.results.copy()
    
    def get_status(self) -> Dict:
        """L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i"""
        return {
            "port": self.port,
            "status": self.status,
            "call_count": self.call_count,
            "queue_remaining": len(self.phone_queue) - self.call_count,
            "results_count": len(self.results),
            "current_baudrate": self.current_baudrate,
            "is_connected": self.is_connected,
            "signal": self.signal_strength,
            "network_operator": self.network_operator,
            "phone_number": self.phone_number,
            "balance": self.balance
        }
    
    def final_reset_and_close(self):
        """Reset cu·ªëi c√πng tr∆∞·ªõc khi tho√°t ch∆∞∆°ng tr√¨nh"""
        try:
            self.log("üîÑ ƒêang g·ª≠i l·ªánh reset cu·ªëi c√πng...")
            
            # ƒê·∫£m b·∫£o k·∫øt n·ªëi v·ªõi baudrate m·∫∑c ƒë·ªãnh tr∆∞·ªõc khi reset
            if self.current_baudrate != self.default_baudrate:
                if not self.connect(self.default_baudrate):
                    self.log("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·ªÉ reset cu·ªëi c√πng")
                    return False
            
            # G·ª≠i l·ªánh reset
            response = self.send_command("AT+CFUN=1,1", wait_time=1.0)
            
            if "OK" in response:
                self.log("‚úÖ Reset cu·ªëi c√πng th√†nh c√¥ng")
                return True
            else:
                self.log("‚ùå Reset cu·ªëi c√πng th·∫•t b·∫°i")
                return False
                
        except Exception as e:
            self.log(f"‚ùå L·ªói reset cu·ªëi c√πng: {e}")
            return False
        finally:
            # Lu√¥n ƒë√≥ng k·∫øt n·ªëi
            self.disconnect()
    
    def _load_stt_model(self):
        """
        Lazy load STT model t·ª´ ModelManager (shared model)
        KH√îNG C·∫¶N N·ªÆA - ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·ªüi model_manager
        """
        pass
    
    def _try_parse_qfopen(self, resp):
        """Parse file descriptor t·ª´ QFOPEN response"""
        m = re.search(r"\+QFOPEN:\s*(\d+)", resp)
        if m:
            return int(m.group(1))
        return None
    
    def _download_file_via_qfread(self, remote_name, local_path):
        """T·∫£i file t·ª´ GSM module v·ªÅ m√°y t√≠nh"""
        try:
            self.log(f"üì• ƒêang t·∫£i file {remote_name}...")
            
            # Ki·ªÉm tra file size
            resp = self.send_command(f'AT+QFLST="{remote_name}"', wait_time=3.0)
            if "ERROR" in resp:
                self.log(f"‚ùå File {remote_name} kh√¥ng t·ªìn t·∫°i")
                return False
            
            # L·∫•y file size
            file_size = 0
            size_match = re.search(r'\+QFLST:\s*"[^"]+",(\d+)', resp)
            if size_match:
                file_size = int(size_match.group(1))
                self.log(f"üìä File size: {file_size} bytes")
            
            # M·ªü file ƒë·ªÉ ƒë·ªçc
            resp = self.send_command(f'AT+QFOPEN="{remote_name}",0', wait_time=3.0)
            fd = self._try_parse_qfopen(resp)
            if fd is None:
                self.log(f"‚ùå Kh√¥ng th·ªÉ m·ªü file {remote_name}")
                return False
            
            total_bytes = 0
            chunk_size = 65536  # 64KB
            
            try:
                with open(local_path, "wb") as f:
                    while True:
                        remaining = file_size - total_bytes
                        current_chunk = min(chunk_size, remaining)
                        
                        if current_chunk <= 0:
                            break
                        
                        # G·ª≠i l·ªánh QFREAD
                        self.serial_connection.write(f"AT+QFREAD={fd},{current_chunk}\r\n".encode())
                        
                        # ƒê·ªçc response
                        response = b""
                        start_time = time.time()
                        while time.time() - start_time < 5:
                            if self.serial_connection.in_waiting > 0:
                                response += self.serial_connection.read(self.serial_connection.in_waiting)
                                if b"CONNECT" in response and b"\r\nOK\r\n" in response:
                                    break
                            else:
                                time.sleep(0.005)
                        
                        # Parse binary data
                        response_str = response.decode(errors="ignore")
                        m = re.search(r"CONNECT\s+(\d+)", response_str)
                        if m:
                            length = int(m.group(1))
                            if length == 0:
                                break
                            
                            # Extract binary data
                            connect_pos = response.find(b"CONNECT")
                            if connect_pos != -1:
                                line_end = response.find(b"\r\n", connect_pos)
                                if line_end != -1:
                                    data_start = line_end + 2
                                    ok_pos = response.find(b"\r\nOK\r\n")
                                    if ok_pos != -1:
                                        binary_data = response[data_start:ok_pos]
                                        f.write(binary_data[:length])
                                        total_bytes += min(length, len(binary_data))
                            
                            if length < chunk_size:
                                break
                        else:
                            break
                            
            except Exception as e:
                self.log(f"‚ùå L·ªói khi t·∫£i file: {e}")
                return False
            finally:
                # ƒê√≥ng file descriptor
                self.send_command(f"AT+QFCLOSE={fd}", wait_time=2.0)
            
            self.log(f"‚úÖ T·∫£i file th√†nh c√¥ng: {total_bytes} bytes")
            return total_bytes > 0
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t·∫£i file: {e}")
            return False
    
    def _convert_to_wav(self, amr_file, wav_file):
        """Convert AMR sang WAV 16kHz mono"""
        try:
            self.log(f"üîÑ ƒêang convert {amr_file} -> {wav_file}")
            audio = AudioSegment.from_file(amr_file)
            audio = audio.set_frame_rate(16000).set_channels(1)
            audio.export(wav_file, format="wav")
            self.log(f"‚úÖ Convert th√†nh c√¥ng")
            return True
        except Exception as e:
            self.log(f"‚ùå L·ªói convert: {e}")
            return False
    
    def _transcribe_audio(self, wav_file):
        """Speech-to-text s·ª≠ d·ª•ng Wav2Vec2 t·ª´ ModelPool (pool of models)"""
        try:
            self.log("üé§ ƒêang th·ª±c hi·ªán speech-to-text...")

            # L·∫•y model t·ª´ ModelPool (blocking n·∫øu pool ƒë·∫ßy)
            processor, model, device = model_manager.get_model()

            try:
                # Load audio
                speech, rate = librosa.load(wav_file, sr=16000)
                input_values = processor(speech, return_tensors="pt", sampling_rate=16000).input_values.to(device)

                # Transcribe
                with torch.no_grad():
                    logits = model(input_values).logits

                predicted_ids = torch.argmax(logits, dim=-1)
                transcription = processor.batch_decode(predicted_ids)

                result = transcription[0]
                self.log(f"üìù STT result: {result}")
                return result

            finally:
                # QUAN TR·ªåNG: Tr·∫£ model v·ªÅ pool sau khi d√πng xong
                model_manager.release_model(model)

        except Exception as e:
            self.log(f"‚ùå L·ªói STT: {e}")
            return ""
    
    def _classify_result(self, text):
        """Ph√¢n lo·∫°i k·∫øt qu·∫£ d·ª±a tr√™n text"""
        try:
            self.log("üîç ƒêang ph√¢n lo·∫°i k·∫øt qu·∫£...")
            result_index = keyword_in_text(text)
            result_label = labels[result_index]
            self.log(f"üìä K·∫øt qu·∫£ ph√¢n lo·∫°i: {result_label}")
            return result_label
        except Exception as e:
            self.log(f"‚ùå L·ªói ph√¢n lo·∫°i: {e}")
            return "incorrect"
