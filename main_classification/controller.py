import threading
import time
import queue
import logging
from typing import List, Dict, Optional, Tuple
from pathlib import Path
import os
from datetime import datetime

from gsm_manager import GSMDevice
from detect_gsm_port import probe_port_simple, get_signal_info, get_phone_number, try_ussd_for_balance
from string_detection import keyword_in_text, labels
from spk_to_text_wav2 import convert_to_wav, transcribe_wav2vec2
from export_excel import export_results_to_excel

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class GSMController:
    """Controller ch√≠nh ƒëi·ªÅu ph·ªëi to√†n b·ªô h·ªá th·ªëng GSM"""
    
    def __init__(self, max_ports: int = 32):
        self.max_ports = max_ports
        self.gsm_devices: Dict[str, GSMDevice] = {}
        self.phone_queue = queue.Queue()
        self.results: Dict[str, List[Dict]] = {
            "ho·∫°t ƒë·ªông": [],
            "leave_message": [],
            "be_blocked": [],
            "can_not_connect": [],
            "incorrect": [],
            "ringback_tone": [],
            "waiting_tone": [],
            "mute": []
        }
        self.is_running = False
        self.is_stopping = False
        self.call_threads: List[threading.Thread] = []
        self.log_callback = None
        
    def set_log_callback(self, callback):
        """Thi·∫øt l·∫≠p callback ƒë·ªÉ g·ª≠i log l√™n GUI"""
        self.log_callback = callback
    
    def log(self, message: str):
        """G·ª≠i log message"""
        logger.info(message)
        if self.log_callback:
            self.log_callback(message)
    
    def scan_gsm_ports(self) -> List[Dict]:
        """Qu√©t v√† ph√°t hi·ªán c√°c c·ªïng GSM"""
        self.log("üîç B·∫Øt ƒë·∫ßu qu√©t c√°c c·ªïng GSM...")
        
        # Import t·ª´ detect_gsm_port
        from serial.tools import list_ports
        
        ports = [p.device for p in list_ports.comports()]
        gsm_ports = []
        
        for port in ports:
            try:
                result = probe_port_simple(port)
                if result.get("ok"):
                    self.log(f"‚úÖ T√¨m th·∫•y GSM t·∫°i {port}")
                    
                    # L·∫•y th√¥ng tin chi ti·∫øt
                    gsm_info = self._get_detailed_gsm_info(port)
                    gsm_info["port"] = port
                    gsm_info["status"] = "Active"
                    gsm_ports.append(gsm_info)
                    
                    if len(gsm_ports) >= self.max_ports:
                        break
                        
            except Exception as e:
                self.log(f"‚ùå L·ªói khi qu√©t {port}: {e}")
        
        self.log(f"üéØ T√¨m th·∫•y {len(gsm_ports)} c·ªïng GSM")
        return gsm_ports
    
    def _get_detailed_gsm_info(self, port: str) -> Dict:
        """L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt c·ªïng GSM"""
        try:
            from serial import Serial
            
            ser = Serial(port=port, baudrate=115200, timeout=0.1, write_timeout=0.5)
            time.sleep(0.1)
            
            # L·∫•y th√¥ng tin t√≠n hi·ªáu
            signal_info = get_signal_info(ser)
            signal_str = "Kh√¥ng x√°c ƒë·ªãnh"
            if "rssi" in signal_info and signal_info["rssi"] is not None:
                signal_str = f"{signal_info['rssi']}/31 ({signal_info.get('dbm', 'N/A')} dBm)"
            
            # L·∫•y s·ªë ƒëi·ªán tho·∫°i
            phone_info = get_phone_number(ser)
            phone_number = phone_info.get("number", "Kh√¥ng x√°c ƒë·ªãnh")
            
            # L·∫•y s·ªë d∆∞
            balance_info = try_ussd_for_balance(ser)
            balance = "Kh√¥ng x√°c ƒë·ªãnh"
            if balance_info.get("content"):
                balance = balance_info["content"]
            
            ser.close()
            
            return {
                "signal": signal_str,
                "phone_number": phone_number,
                "balance": balance
            }
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi l·∫•y th√¥ng tin {port}: {e}")
            return {
                "signal": "L·ªói",
                "phone_number": "L·ªói", 
                "balance": "L·ªói"
            }
    
    def load_phone_list(self, file_path: str) -> bool:
        """T·∫£i danh s√°ch s·ªë ƒëi·ªán tho·∫°i t·ª´ file"""
        try:
            if not os.path.exists(file_path):
                self.log(f"‚ùå File {file_path} kh√¥ng t·ªìn t·∫°i")
                return False
            
            phones = []
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    phone = line.strip()
                    if phone and phone.isdigit():
                        phones.append(phone)
            
            # Th√™m v√†o queue
            for phone in phones:
                self.phone_queue.put(phone)
            
            self.log(f"‚úÖ ƒê√£ t·∫£i {len(phones)} s·ªë ƒëi·ªán tho·∫°i t·ª´ {file_path}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi t·∫£i file: {e}")
            return False
    
    def initialize_gsm_devices(self, gsm_ports: List[Dict]) -> bool:
        """Kh·ªüi t·∫°o c√°c thi·∫øt b·ªã GSM"""
        self.log("üîß Kh·ªüi t·∫°o c√°c thi·∫øt b·ªã GSM...")
        
        for i, gsm_info in enumerate(gsm_ports):
            port = gsm_info["port"]
            try:
                # T·∫°o GSM device
                gsm_device = GSMDevice(port, baudrate=115200)
                
                # K·∫øt n·ªëi
                if gsm_device.connect():
                    # Reset baudrate l√™n 921600
                    if self._reset_baudrate(gsm_device):
                        self.gsm_devices[port] = gsm_device
                        self.log(f"‚úÖ Kh·ªüi t·∫°o th√†nh c√¥ng {port}")
                    else:
                        self.log(f"‚ùå Kh√¥ng th·ªÉ reset baudrate cho {port}")
                        gsm_device.disconnect()
                else:
                    self.log(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {port}")
                    
            except Exception as e:
                self.log(f"‚ùå L·ªói khi kh·ªüi t·∫°o {port}: {e}")
        
        self.log(f"üéØ Kh·ªüi t·∫°o th√†nh c√¥ng {len(self.gsm_devices)} thi·∫øt b·ªã GSM")
        return len(self.gsm_devices) > 0
    
    def _reset_baudrate(self, gsm_device: GSMDevice) -> bool:
        """Reset baudrate t·ª´ 115200 l√™n 921600"""
        try:
            # G·ª≠i l·ªánh reset baudrate
            response = gsm_device.send_command("AT+IPR=921600", wait_time=2.0)
            if "OK" in response:
                response = gsm_device.send_command("AT&W", wait_time=2.0)
                if "OK" in response:
                    gsm_device.disconnect()
                    time.sleep(1)
                    
                    # K·∫øt n·ªëi l·∫°i v·ªõi baudrate m·ªõi
                    gsm_device.baudrate = 921600
                    return gsm_device.connect()
            return False
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi reset baudrate: {e}")
            return False
    
    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒëa lu·ªìng"""
        if self.is_running:
            self.log("‚ö†Ô∏è H·ªá th·ªëng ƒëang ch·∫°y")
            return
        
        if not self.gsm_devices:
            self.log("‚ùå Kh√¥ng c√≥ thi·∫øt b·ªã GSM n√†o ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return
        
        if self.phone_queue.empty():
            self.log("‚ùå Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i n√†o ƒë·ªÉ g·ªçi")
            return
        
        self.is_running = True
        self.is_stopping = False
        
        self.log("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒëa lu·ªìng...")
        
        # T·∫°o thread cho m·ªói GSM device
        for port, gsm_device in self.gsm_devices.items():
            thread = threading.Thread(
                target=self._process_calls_worker,
                args=(port, gsm_device),
                daemon=True
            )
            thread.start()
            self.call_threads.append(thread)
        
        self.log(f"üéØ ƒê√£ kh·ªüi ƒë·ªông {len(self.call_threads)} lu·ªìng x·ª≠ l√Ω")
    
    def _process_calls_worker(self, port: str, gsm_device: GSMDevice):
        """Worker thread x·ª≠ l√Ω cu·ªôc g·ªçi cho m·ªôt GSM device"""
        self.log(f"üîÑ Lu·ªìng {port} b·∫Øt ƒë·∫ßu ho·∫°t ƒë·ªông")
        
        while self.is_running and not self.is_stopping:
            try:
                # L·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ queue (blocking v·ªõi timeout)
                try:
                    phone = self.phone_queue.get(timeout=1)
                except queue.Empty:
                    continue
                
                if phone is None:  # Signal ƒë·ªÉ d·ª´ng
                    break
                
                # X·ª≠ l√Ω cu·ªôc g·ªçi
                result = self._process_single_call(port, gsm_device, phone)
                
                # L∆∞u k·∫øt qu·∫£
                self._save_result(result)
                
                # Mark task done
                self.phone_queue.task_done()
                
                # Ngh·ªâ gi·ªØa c√°c cu·ªôc g·ªçi
                time.sleep(2)
                
            except Exception as e:
                self.log(f"‚ùå L·ªói trong lu·ªìng {port}: {e}")
                time.sleep(5)  # Ngh·ªâ l√¢u h∆°n khi c√≥ l·ªói
        
        self.log(f"üèÅ Lu·ªìng {port} k·∫øt th√∫c")
    
    def _process_single_call(self, port: str, gsm_device: GSMDevice, phone: str) -> Dict:
        """X·ª≠ l√Ω m·ªôt cu·ªôc g·ªçi ƒë∆°n l·∫ª"""
        self.log(f"üìû [{port}] G·ªçi t·ªõi {phone}")
        
        call_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        local_filename = f"{phone}_{call_timestamp}.amr"
        
        try:
            # 1. G·ªçi ƒëi·ªán
            call_response = gsm_device.send_command(f"ATD{phone};", wait_time=3.0)
            if "ERROR" in call_response:
                return {
                    "port": port,
                    "phone": phone,
                    "status": "can_not_connect",
                    "timestamp": call_timestamp,
                    "file": None,
                    "transcription": None,
                    "error": "Kh√¥ng th·ªÉ g·ªçi ƒëi·ªán"
                }
            
            time.sleep(1.5)  # ƒê·ª£i cu·ªôc g·ªçi ƒë∆∞·ª£c thi·∫øt l·∫≠p
            
            # 2. X√≥a file c≈© n·∫øu c√≥
            gsm_device.send_command('AT+QFDEL="record.amr"', wait_time=1.0)
            
            # 3. B·∫Øt ƒë·∫ßu ghi √¢m
            record_response = gsm_device.send_command('AT+QAUDRD=1,"record.amr",13,1', wait_time=3.0)
            if "ERROR" in record_response:
                gsm_device.send_command("ATH", wait_time=1.0)  # Ng·∫Øt cu·ªôc g·ªçi
                return {
                    "port": port,
                    "phone": phone,
                    "status": "can_not_connect",
                    "timestamp": call_timestamp,
                    "file": None,
                    "transcription": None,
                    "error": "Kh√¥ng th·ªÉ ghi √¢m"
                }
            
            # 4. Ghi √¢m 15 gi√¢y v√† check CLCC
            start_time = time.time()
            picked_up = False
            
            while time.time() - start_time < 15:
                # Check CLCC ƒë·ªÉ xem c√≥ nh·∫•c m√°y kh√¥ng
                clcc_response = gsm_device.send_command("AT+CLCC", wait_time=0.5)
                if "+COLP" in clcc_response or "CONNECT" in clcc_response:
                    picked_up = True
                    self.log(f"üìû [{port}] {phone} ƒë√£ nh·∫•c m√°y - d·ª´ng ghi √¢m")
                    break
                
                time.sleep(0.5)  # Check m·ªói 0.5 gi√¢y
            
            # 5. D·ª´ng ghi √¢m
            gsm_device.send_command('AT+QAUDRD=0,"record.amr",13,1', wait_time=2.0)
            time.sleep(0.5)  # ƒê·ª£i module l∆∞u file
            
            # 6. Ng·∫Øt cu·ªôc g·ªçi
            gsm_device.send_command("ATH", wait_time=2.0)
            
            # 7. N·∫øu ƒë√£ nh·∫•c m√°y, kh√¥ng c·∫ßn ph√¢n t√≠ch audio
            if picked_up:
                return {
                    "port": port,
                    "phone": phone,
                    "status": "ho·∫°t ƒë·ªông",
                    "timestamp": call_timestamp,
                    "file": None,
                    "transcription": "Ng∆∞·ªùi nghe ƒë√£ nh·∫•c m√°y",
                    "error": None
                }
            
            # 8. T·∫£i file audio v·ªÅ
            local_path = os.path.join(os.path.dirname(__file__), local_filename)
            if self._download_audio_file(gsm_device, "record.amr", local_path):
                
                # 9. Speech-to-text v√† ph√¢n lo·∫°i
                transcription, classification = self._analyze_audio(local_path)
                
                return {
                    "port": port,
                    "phone": phone,
                    "status": classification,
                    "timestamp": call_timestamp,
                    "file": local_filename,
                    "transcription": transcription,
                    "error": None
                }
            else:
                return {
                    "port": port,
                    "phone": phone,
                    "status": "can_not_connect",
                    "timestamp": call_timestamp,
                    "file": None,
                    "transcription": None,
                    "error": "Kh√¥ng th·ªÉ t·∫£i file audio"
                }
                
        except Exception as e:
            self.log(f"‚ùå L·ªói khi x·ª≠ l√Ω cu·ªôc g·ªçi {phone} tr√™n {port}: {e}")
            return {
                "port": port,
                "phone": phone,
                "status": "can_not_connect",
                "timestamp": call_timestamp,
                "file": None,
                "transcription": None,
                "error": str(e)
            }
    
    def _download_audio_file(self, gsm_device: GSMDevice, remote_filename: str, local_path: str) -> bool:
        """T·∫£i file audio t·ª´ GSM v·ªÅ m√°y t√≠nh"""
        try:
            # Import t·ª´ call_and_record
            from call_and_record import download_file_via_qfread
            
            return download_file_via_qfread(gsm_device.serial_connection, remote_filename, local_path)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi t·∫£i file audio: {e}")
            return False
    
    def _analyze_audio(self, audio_path: str) -> Tuple[str, str]:
        """Ph√¢n t√≠ch audio: speech-to-text v√† ph√¢n lo·∫°i"""
        try:
            # Convert AMR to WAV
            temp_wav = "temp.wav"
            convert_to_wav(audio_path, temp_wav)
            
            # Speech-to-text
            transcription = transcribe_wav2vec2(temp_wav)
            
            # Ph√¢n lo·∫°i d·ª±a tr√™n t·ª´ kh√≥a
            classification_index = keyword_in_text(transcription)
            classification = labels[classification_index]
            
            # Cleanup temp file
            if os.path.exists(temp_wav):
                os.remove(temp_wav)
            
            return transcription, classification
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi ph√¢n t√≠ch audio: {e}")
            return "", "mute"
    
    def _save_result(self, result: Dict):
        """L∆∞u k·∫øt qu·∫£ v√†o dictionary"""
        status = result["status"]
        if status in self.results:
            self.results[status].append(result)
        else:
            # N·∫øu kh√¥ng t√¨m th·∫•y category, th√™m v√†o "mute"
            self.results["mute"].append(result)
        
        self.log(f"üìä [{result['port']}] {result['phone']} ‚Üí {status}")
    
    def stop_processing(self):
        """D·ª´ng x·ª≠ l√Ω"""
        if not self.is_running:
            return
        
        self.log("üõë ƒêang d·ª´ng h·ªá th·ªëng...")
        self.is_stopping = True
        
        # ƒê·ª£i t·∫•t c·∫£ thread k·∫øt th√∫c
        for thread in self.call_threads:
            thread.join(timeout=5)
        
        self.call_threads.clear()
        self.is_running = False
        self.is_stopping = False
        
        self.log("‚úÖ ƒê√£ d·ª´ng h·ªá th·ªëng")
    
    def get_results(self) -> Dict[str, List[Dict]]:
        """L·∫•y k·∫øt qu·∫£"""
        return self.results
    
    def clear_results(self):
        """X√≥a k·∫øt qu·∫£"""
        for key in self.results:
            self.results[key].clear()
    
    def export_results(self, output_path: str = None) -> bool:
        """Xu·∫•t k·∫øt qu·∫£ ra file Excel"""
        try:
            if output_path is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_path = f"gsm_results_{timestamp}.xlsx"
            
            return export_results_to_excel(self.results, output_path)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói khi xu·∫•t k·∫øt qu·∫£: {e}")
            return False
    
    def disconnect_all(self):
        """Ng·∫Øt k·∫øt n·ªëi t·∫•t c·∫£ GSM devices"""
        for port, gsm_device in self.gsm_devices.items():
            try:
                gsm_device.disconnect()
                self.log(f"üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi {port}")
            except Exception as e:
                self.log(f"‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi {port}: {e}")
        
        self.gsm_devices.clear()
